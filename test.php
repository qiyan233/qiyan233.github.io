<?php
echo "<!DOCTYPE html>\n";
echo "html lang=\"zh-CN\">\n";
echo "head>\n";
echo " <meta charset=\"UTF-8\">\n";
echo " <title>高级数据分类 & 分批转发工具</title>\n";
echo " \n";
echo " <!-- 引入Bootstrap CSS -->\n";
echo " <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n";
echo " <!-- 引入Bootstrap Icons -->\n";
echo " <link href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css\" rel=\"stylesheet\">\n";
echo " <!-- 引入Chart.js用于数据可视化 -->\n";
echo " <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n";
echo " <!-- 引入JSZip用于ZIP打包 -->\n";
echo " <script src=\"https://cdn.jsdelivr.net/npm/jszip/dist/jszip.min.js\"></script>\n";
echo " \n";
echo " <style>\n";
echo "   /* 基础样式 */\n";
echo "   body {\n";
echo "     background-color: #f0f2f5;\n";
echo "     transition: background-color 0.3s, color 0.3s;\n";
echo "     font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n";
echo "   }\n";
echo "   .dark-mode {\n";
echo "     background-color: #121212;\n";
echo "     color: #e0e0e0;\n";
echo "   }\n";
echo "   .dark-mode .section {\n";
echo "     background-color: #1e1e1e;\n";
echo "     box-shadow: 0 4px 12px rgba(0,0,0,0.3);\n";
echo "   }\n";
echo "   .main-container {\n";
echo "     max-width: 1400px;\n";
echo "     margin: 0 auto;\n";
echo "     padding: 20px;\n";
echo "   }\n";
echo "   .section {\n";
echo "     padding: 25px;\n";
echo "     border-radius: 12px;\n";
echo "     background-color: #ffffff;\n";
echo "     box-shadow: 0 4px 12px rgba(0,0,0,0.1);\n";
echo "     margin-bottom: 30px;\n";
echo "     transition: background-color 0.3s, box-shadow 0.3s;\n";
echo "   }\n";
echo "   .log-container {\n";
echo "     max-height: 300px;\n";
echo "     overflow-y: auto;\n";
echo "     background-color: #212529;\n";
echo "     color: #ffffff;\n";
echo "     padding: 15px;\n";
echo "     border-radius: 8px;\n";
echo "     font-size: 14px;\n";
echo "     font-family: Consolas, monospace;\n";
echo "     transition: background-color 0.3s, color 0.3s;\n";
echo "   }\n";
echo "   .collapsed-log {\n";
echo "     display: none;\n";
echo "   }\n";
echo "   .ip-info {\n";
echo "     font-weight: bold;\n";
echo "     color: #0d6efd;\n";
echo "   }\n";
echo "   .toggle-theme-btn {\n";
echo "     position: fixed;\n";
echo "     bottom: 30px;\n";
echo "     right: 30px;\n";
echo "     z-index: 1000;\n";
echo "     transition: transform 0.3s;\n";
echo "   }\n";
echo "   .toggle-theme-btn:hover {\n";
echo "     transform: scale(1.1);\n";
echo "   }\n";
echo "   /* 动画效果 */\n";
echo "   .fade-in {\n";
echo "     animation: fadeIn 0.5s ease-in-out;\n";
echo "   }\n";
echo "   @keyframes fadeIn {\n";
echo "     from { opacity: 0; }\n";
echo "     to { opacity: 1; }\n";
echo "   }\n";
echo "   /* 表格样式 */\n";
echo "   table th, table td {\n";
echo "     vertical-align: middle;\n";
echo "     text-align: center;\n";
echo "     transition: background-color 0.3s, color 0.3s;\n";
echo "   }\n";
echo "   /* 按钮动画 */\n";
echo "   .btn-animate {\n";
echo "     transition: transform 0.2s, box-shadow 0.2s;\n";
echo "   }\n";
echo "   .btn-animate:hover {\n";
echo "     transform: translateY(-3px);\n";
echo "     box-shadow: 0 6px 12px rgba(0,0,0,0.2);\n";
echo "   }\n";
echo "   /* 折叠列表样式 */\n";
echo "   .category-header {\n";
echo "     cursor: pointer;\n";
echo "   }\n";
echo " </style>\n";
echo "/head>\n";
echo "body>\n";
echo "div class=\"main-container\">\n";
echo "  <h1 class=\"text-center mb-5\">高级数据分类 & 分批转发工具</h1>\n";
echo "  <!-- ====== 基础设置区 ====== -->\n";
echo " <div class=\"section fade-in\">\n";
echo "   <h4>1. 基础设置</h4>\n";
echo "   <div class=\"row g-4 align-items-center mt-3\">\n";
echo "     <!-- 是否启用IP查询 -->\n";
echo "     <div class=\"col-md-3\">\n";
echo "       <div class=\"form-check form-switch\">\n";
echo "         <input class=\"form-check-input\" type=\"checkbox\" id=\"enableIpCheck\" checked>\n";
echo "         <label class=\"form-check-label\" for=\"enableIpCheck\">\n";
echo "           启用IP归属地查询\n";
echo "         </label>\n";
echo "       </div>\n";
echo "     </div>\n";
echo "     <!-- 每批发送条数 -->\n";
echo "     <div class=\"col-md-3\">\n";
echo "       <label for=\"batchSize\" class=\"form-label\">每批发送条数</label>\n";
echo "       <input type=\"number\" class=\"form-control\" id=\"batchSize\" value=\"10\" min=\"1\">\n";
echo "     </div>\n";
echo "     <!-- 每批发送间隔（毫秒） -->\n";
echo "     <div class=\"col-md-3\">\n";
echo "       <label for=\"delayMs\" class=\"form-label\">每批发送间隔（毫秒）</label>\n";
echo "       <input type=\"number\" class=\"form-control\" id=\"delayMs\" value=\"2000\" min=\"0\">\n";
echo "     </div>\n";
echo "     <!-- 转发API地址 -->\n";
echo "     <div class=\"col-md-3\">\n";
echo "       <label for=\"apiUrl\" class=\"form-label\">转发API地址</label>\n";
echo "       <input type=\"text\" class=\"form-control\" id=\"apiUrl\" value=\"https://xizhi.qqoq.net/XZ0e02fa49a53fdcbfee7699d1b4032649.send\">\n";
echo "     </div>\n";
echo "   </div>\n";
echo " </div>\n";
echo "  <!-- ====== 数据输入区 ====== -->\n";
echo " <div class=\"section fade-in\">\n";
echo "   <h4>2. 数据输入</h4>\n";
echo "   <p class=\"text-muted\">\n";
echo "     将原始数据（包含 <code>账号大区</code>、<code>角色名称</code>、<code>游戏等级</code>、<code>仓库价值</code>、<code>access_token</code> 等字段）粘贴或上传到此处，进行分类并查看或导出。\n";
echo "     <br>分类完成后，也可分批转发到指定API。\n";
echo "   </p>\n";
echo "   <div class=\"row g-4\">\n";
echo "     <div class=\"col-md-8\">\n";
echo "       <textarea id=\"dataInput\" class=\"form-control\" rows=\"6\" placeholder=\"在此粘贴您的数据...\"></textarea>\n";
echo "     </div>\n";
echo "     <div class=\"col-md-4\">\n";
echo "       <input type=\"file\" id=\"fileInput\" accept=\".txt, .csv, .json\" class=\"form-control mb-3\">\n";
echo "       <button class=\"btn btn-primary w-100 btn-animate\" onclick=\"loadFile()\">\n";
echo "         <i class=\"bi bi-upload\"></i> 上传并预览\n";
echo "       </button>\n";
echo "     </div>\n";
echo "   </div>\n";
echo "   <!-- 实时预览区域 -->\n";
echo "   <div id=\"previewSection\" class=\"mt-5\" style=\"display:none;\">\n";
echo "     <h5>实时预览（仅展示前5条记录）</h5>\n";
echo "     <canvas id=\"previewChart\" height=\"200\" class=\"mt-3\"></canvas>\n";
echo "     <table class=\"table table-bordered table-sm mt-3\" id=\"previewTable\"></table>\n";
echo "   </div>\n";
echo " </div>\n";
echo "  <!-- ====== 分类管理区 ====== -->\n";
echo " <div class=\"section fade-in\">\n";
echo "   <h4>3. 分类管理</h4>\n";
echo "   <div class=\"mb-4\">\n";
echo "     <button class=\"btn btn-success me-3 btn-animate\" onclick=\"processData()\">\n";
echo "       <i class=\"bi bi-check2-circle\"></i> 解析并分类数据\n";
echo "     </button>\n";
echo "     <button class=\"btn btn-danger btn-animate\" onclick=\"clearAll()\">\n";
echo "       <i class=\"bi bi-x-circle\"></i> 清空/重置\n";
echo "     </button>\n";
echo "   </div>\n";
echo "   <!-- 全部数据列表 -->\n";
echo "   <div id=\"allDataSection\" style=\"display:none;\" class=\"mb-5\">\n";
echo "     <h5>全部数据列表（可勾选导出）</h5>\n";
echo "     <div class=\"table-responsive\">\n";
echo "       <table class=\"table table-striped table-hover table-bordered table-sm\" id=\"allDataTable\"></table>\n";
echo "     </div>\n";
echo "     <div class=\"mt-3\">\n";
echo "       <button class=\"btn btn-outline-dark me-2 btn-animate\" onclick=\"exportSelectedWithLabels()\">\n";
echo "         <i class=\"bi bi-clipboard-check\"></i> 导出选中（带中文标注 TXT）\n";
echo "       </button>\n";
echo "       <button class=\"btn btn-outline-dark me-2 btn-animate\" onclick=\"exportSelectedWithoutLabels()\">\n";
echo "         <i class=\"bi bi-clipboard-x\"></i> 导出选中（不带中文标注 TXT）\n";
echo "       </button>\n";
echo "       <button class=\"btn btn-outline-dark me-2 btn-animate\" onclick=\"exportSelectedHTML()\">\n";
echo "         <i class=\"bi bi-file-earmark-text\"></i> 导出选中（HTML）\n";
echo "       </button>\n";
echo "       <button class=\"btn btn-outline-dark btn-animate\" onclick=\"exportSelectedZip()\">\n";
echo "         <i class=\"bi bi-archive\"></i> 打包导出选中（ZIP）\n";
echo "       </button>\n";
echo "       <!-- 添加“一键打包全部”按钮 -->\n";
echo "       <button class=\"btn btn-outline-danger ms-2 btn-animate\" onclick=\"exportAllZip()\">\n";
echo "         <i class=\"bi bi-archive\"></i> 一键打包全部（ZIP）\n";
echo "       </button>\n";
echo "     </div>\n";
echo "   </div>\n";
echo "   <!-- 分类结果展示 -->\n";
echo "   <hr>\n";
echo "   <h5>分类结果</h5>\n";
echo "   <div class=\"mb-4\">\n";
echo "     <label for=\"searchInput\" class=\"form-label\">搜索角色名称：</label>\n";
echo "     <input type=\"text\" id=\"searchInput\" class=\"form-control\" placeholder=\"输入关键字...\">\n";
echo "   </div>\n";
echo "   <!-- 数据可视化图表 -->\n";
echo "   <canvas id=\"categoryChart\" height=\"400\" class=\"mt-3\"></canvas>\n";
echo "   <!-- 添加更多图表选项 -->\n";
echo "   <div class=\"mt-4\">\n";
echo "     <h5>更多数据可视化</h5>\n";
echo "     <div class=\"row g-4\">\n";
echo "       <div class=\"col-md-6\">\n";
echo "         <canvas id=\"levelBarChart\" height=\"300\"></canvas>\n";
echo "       </div>\n";
echo "       <div class=\"col-md-6\">\n";
echo "         <canvas id=\"warehouseLineChart\" height=\"300\"></canvas>\n";
echo "       </div>\n";
echo "     </div>\n";
echo "   </div>\n";
echo "   <div id=\"results\" class=\"p-4 bg-light border rounded mt-4\"></div>\n";
echo " </div>\n";
echo "  <!-- ====== 分批转发区 ====== -->\n";
echo " <div class=\"section fade-in\">\n";
echo "   <h4>4. 分批转发</h4>\n";
echo "   <button class=\"btn btn-primary mb-4 btn-animate\" id=\"startSendBtn\">\n";
echo "     <i class=\"bi bi-send\"></i> 一键分批发送全部记录\n";
echo "   </button>\n";
echo "   <!-- 进度与IP信息 -->\n";
echo "   <div class=\"row g-4 align-items-center mb-4\">\n";
echo "     <div class=\"col-md-4 col-sm-12\">\n";
echo "       <label class=\"form-label\">当前检测到的IP信息：</label>\n";
echo "       <div>\n";
echo "         <span id=\"ipInfo\" class=\"ip-info\">等待获取...</span>\n";
echo "       </div>\n";
echo "     </div>\n";
echo "     <div class=\"col-md-4 col-sm-12\">\n";
echo "       <label class=\"form-label\">发送进度</label>\n";
echo "       <div class=\"progress\" style=\"height: 28px;\">\n";
echo "         <div id=\"progressBar\" class=\"progress-bar progress-bar-striped progress-bar-animated\" role=\"progressbar\" style=\"width: 0%;\">\n";
echo "           0%\n";
echo "         </div>\n";
echo "       </div>\n";
echo "     </div>\n";
echo "     <div class=\"col-md-4 col-sm-12\">\n";
echo "       <label class=\"form-label\">预估剩余时间</label>\n";
echo "       <div id=\"estimatedTime\" style=\"font-weight: bold;\">\n";
echo "         待计算\n";
echo "       </div>\n";
echo "     </div>\n";
echo "   </div>\n";
echo "   <!-- 发送日志 -->\n";
echo "   <hr>\n";
echo "   <h5>\n";
echo "     发送日志\n";
echo "     <button class=\"btn btn-sm btn-outline-info ms-2\" id=\"toggleLogBtn\">折叠日志</button>\n";
echo "   </h5>\n";
echo "   <div class=\"log-container\" id=\"logContainer\"></div>\n";
echo " </div>\n";
echo "</div>\n";
echo "<!-- 主题切换按钮 -->\n";
echo "button class=\"btn btn-secondary toggle-theme-btn btn-animate\" onclick=\"toggleTheme()\">\n";
echo " <i class=\"bi bi-moon\"></i> 切换主题\n";
echo "/button>\n";
echo "<!-- 引入Bootstrap JS -->\n";
echo "script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"></script>\n";
echo "script>\n";
echo " /* ======================== 全局变量 ======================= */\n";
echo " let globalData = [];       // 所有解析到的记录（含等级=0）\n";
echo " let filteredData = [];     // 过滤掉等级=0的记录，用于分类\n";
echo " let categoriesData = [];   // 分类后的数据\n";
echo " let ipTitle = \"\";          // IP信息（用于标题）\n";
echo " let isSending = false;     // 标记是否正在发送\n";
echo " let linesToSend = [];      // 将要发送的全部行\n";
echo " let batchIndex = 0;        // 当前批次\n";
echo " let totalBatches = 1;      // 总批数\n";
echo "  /* DOM引用 */\n";
echo " const dataInputEl = document.getElementById(\"dataInput\");\n";
echo " const fileInputEl = document.getElementById(\"fileInput\");\n";
echo " const previewSectionEl = document.getElementById(\"previewSection\");\n";
echo " const previewTableEl = document.getElementById(\"previewTable\");\n";
echo " const previewChartEl = document.getElementById(\"previewChart\").getContext('2d');\n";
echo " const allDataSectionEl = document.getElementById(\"allDataSection\");\n";
echo " const allDataTableEl = document.getElementById(\"allDataTable\");\n";
echo " const resultsDiv = document.getElementById(\"results\");\n";
echo " const searchInputEl = document.getElementById(\"searchInput\");\n";
echo " const logContainerEl = document.getElementById(\"logContainer\");\n";
echo " const toggleLogBtn = document.getElementById(\"toggleLogBtn\");\n";
echo " const ipInfoEl = document.getElementById(\"ipInfo\");\n";
echo " const progressBarEl = document.getElementById(\"progressBar\");\n";
echo " const estimatedTimeEl = document.getElementById(\"estimatedTime\");\n";
echo " const enableIpCheckEl = document.getElementById(\"enableIpCheck\");\n";
echo " const apiUrlInputEl = document.getElementById(\"apiUrl\");\n";
echo " const batchSizeInputEl = document.getElementById(\"batchSize\");\n";
echo " const delayMsInputEl = document.getElementById(\"delayMs\");\n";
echo " const startSendBtn = document.getElementById(\"startSendBtn\");\n";
echo " const toggleThemeBtn = document.querySelector(\".toggle-theme-btn\");\n";
echo "  /* ======================== 日志相关函数 ======================= */\n";
echo " function appendLog(message, isError=false) {\n";
echo "   const p = document.createElement(\"p\");\n";
echo "   p.textContent = message;\n";
echo "   if(isError) {\n";
echo "     p.style.color = \"#ff6b6b\"; // 错误信息用红色\n";
echo "   }\n";
echo "   logContainerEl.appendChild(p);\n";
echo "   logContainerEl.scrollTop = logContainerEl.scrollHeight;\n";
echo " }\n";
echo "  function clearLog() {\n";
echo "   logContainerEl.innerHTML = \"\";\n";
echo " }\n";
echo "  /* ======================== 折叠日志功能 ======================= */\n";
echo " toggleLogBtn.addEventListener(\"click\", () => {\n";
echo "   const isHidden = logContainerEl.classList.contains(\"collapsed-log\");\n";
echo "   if(isHidden) {\n";
echo "     // 展开日志\n";
echo "     logContainerEl.classList.remove(\"collapsed-log\");\n";
echo "     toggleLogBtn.textContent = \"折叠日志\";\n";
echo "   } else {\n";
echo "     // 折叠日志\n";
echo "     logContainerEl.classList.add(\"collapsed-log\");\n";
echo "     toggleLogBtn.textContent = \"展开日志\";\n";
echo "   }\n";
echo " });\n";
echo "  /* ======================== 文件读取功能 ======================= */\n";
echo " function loadFile() {\n";
echo "   const file = fileInputEl.files[0];\n";
echo "   if(!file) {\n";
echo "     alert(\"请先选择一个支持的文件（TXT、CSV、JSON）\");\n";
echo "     return;\n";
echo "   }\n";
echo "   const reader = new FileReader();\n";
echo "   reader.onload = (e) => {\n";
echo "     dataInputEl.value = e.target.result;\n";
echo "     previewSectionEl.style.display = \"block\";\n";
echo "     renderPreview(e.target.result, file.type);\n";
echo "   };\n";
echo "   if(file.type === \"application/json\") {\n";
echo "     reader.readAsText(file, \"UTF-8\");\n";
echo "   } else {\n";
echo "     reader.readAsText(file, \"UTF-8\");\n";
echo "   }\n";
echo " }\n";
echo "  /* ======================== 实时预览功能 ======================= */\n";
echo " function renderPreview(rawText, fileType) {\n";
echo "   let records = [];\n";
echo "   if(fileType === \"application/json\") {\n";
echo "     try {\n";
echo "       records = JSON.parse(rawText);\n";
echo "       if(!Array.isArray(records)) throw new Error(\"JSON数据必须是数组格式\");\n";
echo "     } catch (err) {\n";
echo "       alert(\"JSON数据解析失败：\" + err.message);\n";
echo "       previewSectionEl.style.display = \"none\";\n";
echo "       return;\n";
echo "     }\n";
echo "   } else {\n";
echo "     records = rawText.split(/账号大区：/).filter(r => r.trim());\n";
echo "   }\n";
echo "    const previewList = [];\n";
echo "   for(let i=0; i<records.length && i<5; i++) { // 仅展示前5条\n";
echo "     const rec = records[i];\n";
echo "     let item = {};\n";
echo "     if(fileType === \"application/json\") {\n";
echo "       item = rec;\n";
echo "     } else {\n";
echo "       // 提取字段\n";
echo "       const nameMatch = rec.match(/角色名称：([^|]+)/);\n";
echo "       const levelMatch = rec.match(/游戏等级：([^|]+)/);\n";
echo "       const warehouseMatch = rec.match(/仓库价值：([^|]+)/);\n";
echo "       item = {\n";
echo "         \"角色名称\": nameMatch ? nameMatch[1].trim() : \"\",\n";
echo "         \"游戏等级\": levelMatch ? levelMatch[1].trim() : \"\",\n";
echo "         \"仓库价值\": warehouseMatch ? warehouseMatch[1].trim().replace(\"M\", \"\") : \"\"\n";
echo "       };\n";
echo "     }\n";
echo "     previewList.push(item);\n";
echo "   }\n";
echo "    if(previewList.length === 0) {\n";
echo "     previewSectionEl.style.display = \"none\";\n";
echo "     alert(\"没有可预览的数据，或格式不正确\");\n";
echo "     return;\n";
echo "   }\n";
echo "    renderPreviewTable(previewList);\n";
echo "   renderPreviewChart(previewList);\n";
echo " }\n";
echo "  function renderPreviewTable(data) {\n";
echo "   previewTableEl.innerHTML = \"\";\n";
echo "   const header = document.createElement(\"tr\");\n";
echo "   [\"角色名称\",\"游戏等级\",\"仓库价值 (M)\"].forEach(h => {\n";
echo "     const th = document.createElement(\"th\");\n";
echo "     th.textContent = h;\n";
echo "     header.appendChild(th);\n";
echo "   });\n";
echo "   previewTableEl.appendChild(header);\n";
echo "   data.forEach(item => {\n";
echo "     const tr = document.createElement(\"tr\");\n";
echo "     Object.values(item).forEach(val => {\n";
echo "       const td = document.createElement(\"td\");\n";
echo "       td.textContent = val;\n";
echo "       tr.appendChild(td);\n";
echo "     });\n";
echo "     previewTableEl.appendChild(tr);\n";
echo "   });\n";
echo " }\n";
echo "  function renderPreviewChart(data) {\n";
echo "   const levels = data.map(item => parseInt(item[\"游戏等级\"], 10) || 0);\n";
echo "   const warehouses = data.map(item => parseFloat(item[\"仓库价值\"]) || 0);\n";
echo "   const chart = new Chart(previewChartEl, {\n";
echo "     type: 'bar',\n";
echo "     data: {\n";
echo "       labels: data.map((item, idx) => `记录${idx+1}`),\n";
echo "       datasets: [\n";
echo "         {\n";
echo "           label: '游戏等级',\n";
echo "           data: levels,\n";
echo "           backgroundColor: 'rgba(54, 162, 235, 0.6)'\n";
echo "         },\n";
echo "         {\n";
echo "           label: '仓库价值 (M)',\n";
echo "           data: warehouses,\n";
echo "           backgroundColor: 'rgba(255, 99, 132, 0.6)'\n";
echo "         }\n";
echo "       ]\n";
echo "     },\n";
echo "     options: {\n";
echo "       responsive: true,\n";
echo "       plugins: {\n";
echo "         tooltip: {\n";
echo "           mode: 'index',\n";
echo "           intersect: false\n";
echo "         },\n";
echo "         legend: {\n";
echo "           position: 'top',\n";
echo "         },\n";
echo "         title: {\n";
echo "           display: true,\n";
echo "           text: '实时预览图表'\n";
echo "         }\n";
echo "       },\n";
echo "       interaction: {\n";
echo "         mode: 'nearest',\n";
echo "         axis: 'x',\n";
echo "         intersect: false\n";
echo "       },\n";
echo "       scales: {\n";
echo "         y: {\n";
echo "           beginAtZero: true\n";
echo "         }\n";
echo "       }\n";
echo "     }\n";
echo "   });\n";
echo " }\n";
echo "  /* ======================== 数据解析与分类 ======================= */\n";
echo " function processData() {\n";
echo "   const rawText = dataInputEl.value.trim();\n";
echo "   if(!rawText) {\n";
echo "     alert(\"请输入或上传数据后再进行解析\");\n";
echo "     return;\n";
echo "   }\n";
echo "    let records = [];\n";
echo "   const fileType = fileInputEl.files[0] ? fileInputEl.files[0].type : \"text/plain\";\n";
echo "   if(fileType === \"application/json\") {\n";
echo "     try {\n";
echo "       records = JSON.parse(rawText);\n";
echo "       if(!Array.isArray(records)) throw new Error(\"JSON数据必须是数组格式\");\n";
echo "     } catch (err) {\n";
echo "       alert(\"JSON数据解析失败：\" + err.message);\n";
echo "       return;\n";
echo "     }\n";
echo "   } else {\n";
echo "     records = rawText.split(/账号大区：/).filter(r => r.trim());\n";
echo "   }\n";
echo "    // 定义字段\n";
echo "   const fields = [\n";
echo "     \"账号大区\", \"角色名称\", \"角色编号\", \"游戏等级\", \"哈夫币\",\n";
echo "     \"道具价值\", \"仓库价值\", \"在线\", \"今日登录\", \"特定模式等级\",\n";
echo "     \"禁言\", \"封号\", \"最后登录时间\", \"最后登出时间\", \"access_token\"\n";
echo "   ];\n";
echo "    // 解析记录\n";
echo "   const parsed = records.map(rec => parseOneRecord(rec, fields, fileType));\n";
echo "   globalData = parsed; // 包含等级=0\n";
echo "    // 过滤等级=0\n";
echo "   filteredData = parsed.filter(x => x[\"游戏等级\"] !== 0);\n";
echo "    // 分类\n";
echo "   categoriesData = doClassification(filteredData);\n";
echo "   renderCategories(categoriesData);\n";
echo "   renderCategoryChart(categoriesData);\n";
echo "   renderAdditionalCharts(categoriesData);\n";
echo "    // 渲染全部数据列表\n";
echo "   renderAllDataTable(parsed);\n";
echo "    appendLog(`解析完成，共${parsed.length}条记录；过滤掉等级=0共有${parsed.length - filteredData.length}条。`);\n";
echo "    // 显示全部数据部分\n";
echo "   allDataSectionEl.style.display = \"block\";\n";
echo " }\n";
echo "  function parseOneRecord(rec, fields, fileType) {\n";
echo "   const obj = {};\n";
echo "   if(fileType === \"application/json\") {\n";
echo "     fields.forEach(field => {\n";
echo "       obj[field] = rec[field] !== undefined ? rec[field] : \"\";\n";
echo "     });\n";
echo "   } else {\n";
echo "     // 账号大区已在分割时被移除\n";
echo "     fields.slice(1).forEach(field => {\n";
echo "       let match = rec.match(new RegExp(`${field}：([^|]+)`));\n";
echo "       if(match) {\n";
echo "         if(field === \"游戏等级\" || field === \"仓库价值\") {\n";
echo "           if(field === \"游戏等级\") {\n";
echo "             let lv = parseInt(match[1].trim(), 10);\n";
echo "             obj[field] = isNaN(lv) ? 0 : lv;\n";
echo "           } else if(field === \"仓库价值\") {\n";
echo "             let valStr = match[1].trim().replace(\"M\", \"\");\n";
echo "             let val = parseFloat(valStr) || 0;\n";
echo "             obj[field] = val;\n";
echo "           }\n";
echo "         } else {\n";
echo "           obj[field] = match[1].trim();\n";
echo "         }\n";
echo "       } else {\n";
echo "         obj[field] = \"\";\n";
echo "       }\n";
echo "     });\n";
echo "      // 特殊处理access_token\n";
echo "     let tokenMatch = rec.match(/#access_token=([^}]+)/);\n";
echo "     obj[\"access_token\"] = tokenMatch ? `#access_token=${tokenMatch[1].trim()}` : \"\";\n";
echo "   }\n";
echo "   return obj;\n";
echo " }\n";
echo "  function doClassification(data) {\n";
echo "   data.forEach(item => {\n";
echo "     let lvCat = \"\";\n";
echo "     let wvCat = \"\";\n";
echo "     const level = item[\"游戏等级\"];\n";
echo "     const warehouse = item[\"仓库价值\"];\n";
echo "      // 分类逻辑调整：\n";
echo "     // 舍弃 30级以上且仓库价值 <5M\n";
echo "     if(level >= 30 && warehouse < 5) {\n";
echo "       // 不纳入任何类别\n";
echo "       return;\n";
echo "     }\n";
echo "      // 新增分类：\n";
echo "     if(level >= 30) {\n";
echo "       if(warehouse < 2) {\n";
echo "         lvCat = \"30级以上2M以下\";\n";
echo "       }\n";
echo "       else if(warehouse >=2 && warehouse <5) {\n";
echo "         lvCat = \"30级以上2M-5M\";\n";
echo "       }\n";
echo "       else {\n";
echo "         lvCat = \"30级以上5M以上\";\n";
echo "       }\n";
echo "     }\n";
echo "     else if(level > 12 && level < 30) {\n";
echo "       lvCat = \"30级以下12级以上\";\n";
echo "     }\n";
echo "     else {\n";
echo "       lvCat = \"12级以下\";\n";
echo "     }\n";
echo "      // 仓库价值分类保持不变\n";
echo "     if(level < 30) { // 只针对不属于30级以上的分类\n";
echo "       if(warehouse < 5) wvCat = \"仓库价值0-5M\";\n";
echo "       else if(warehouse < 10) wvCat = \"仓库价值5-10M\";\n";
echo "       else if(warehouse < 15) wvCat = \"仓库价值10-15M\";\n";
echo "       else if(warehouse < 20) wvCat = \"仓库价值15-20M\";\n";
echo "       else if(warehouse < 25) wvCat = \"仓库价值20-25M\";\n";
echo "       else if(warehouse < 30) wvCat = \"仓库价值25-30M\";\n";
echo "       else wvCat = \"仓库价值30M以上\";\n";
echo "     } else { // 30级以上的分类，已经包含了仓库价值的细分\n";
echo "       if(warehouse < 2) {\n";
echo "         wvCat = \"仓库价值0-2M\";\n";
echo "       }\n";
echo "       else if(warehouse >=2 && warehouse <5) {\n";
echo "         wvCat = \"仓库价值2-5M\";\n";
echo "       }\n";
echo "       else {\n";
echo "         wvCat = \"仓库价值5M以上\";\n";
echo "       }\n";
echo "     }\n";
echo "      item[\"类别\"] = lvCat + \"_\" + wvCat;\n";
echo "   });\n";
echo "   // 过滤掉未分类的记录\n";
echo "   return data.filter(item => item[\"类别\"]);\n";
echo " }\n";
echo "  /* ======================== 渲染全部数据表 ======================= */\n";
echo " function renderAllDataTable(data) {\n";
echo "   if(!data || data.length === 0){\n";
echo "     allDataSectionEl.style.display = \"none\";\n";
echo "     return;\n";
echo "   }\n";
echo "   allDataSectionEl.style.display = \"block\";\n";
echo "   allDataTableEl.innerHTML = \"\";\n";
echo "    // 表头\n";
echo "   const header = document.createElement(\"tr\");\n";
echo "   const thCheck = document.createElement(\"th\");\n";
echo "   thCheck.innerHTML = `<input type=\"checkbox\" id=\"selectAll\">`;\n";
echo "   thCheck.style.width = \"60px\";\n";
echo "   header.appendChild(thCheck);\n";
echo "   Object.keys(data[0]).forEach(k => {\n";
echo "     const th = document.createElement(\"th\");\n";
echo "     th.textContent = k;\n";
echo "     header.appendChild(th);\n";
echo "   });\n";
echo "   allDataTableEl.appendChild(header);\n";
echo "    // 表格内容\n";
echo "   data.forEach((item, idx) => {\n";
echo "     const tr = document.createElement(\"tr\");\n";
echo "     const tdCheck = document.createElement(\"td\");\n";
echo "     const cb = document.createElement(\"input\");\n";
echo "     cb.type = \"checkbox\";\n";
echo "     cb.value = idx;\n";
echo "     tdCheck.appendChild(cb);\n";
echo "     tr.appendChild(tdCheck);\n";
echo "      Object.keys(item).forEach(key => {\n";
echo "       const td = document.createElement(\"td\");\n";
echo "       td.textContent = item[key];\n";
echo "       tr.appendChild(td);\n";
echo "     });\n";
echo "     allDataTableEl.appendChild(tr);\n";
echo "   });\n";
echo "    // 全选功能\n";
echo "   const selectAllCb = document.getElementById(\"selectAll\");\n";
echo "   selectAllCb.addEventListener(\"change\", (e) => {\n";
echo "     const checkboxes = allDataTableEl.querySelectorAll('input[type=\"checkbox\"]');\n";
echo "     checkboxes.forEach(cb => cb.checked = e.target.checked);\n";
echo "   });\n";
echo " }\n";
echo "  /* ======================== 渲染分类结果 ======================= */\n";
echo " function renderCategories(data) {\n";
echo "   resultsDiv.innerHTML = \"\";\n";
echo "   if(!data || data.length === 0){\n";
echo "     resultsDiv.innerHTML = \"<p>没有可显示的数据</p>\";\n";
echo "     return;\n";
echo "   }\n";
echo "   const categories = [...new Set(data.map(x => x[\"类别\"]))];\n";
echo "    categories.forEach(cat => {\n";
echo "     const catBlock = document.createElement(\"div\");\n";
echo "     catBlock.className = \"p-4 mb-4 bg-white border rounded shadow-sm fade-in\";\n";
echo "      // 折叠按钮\n";
echo "     const header = document.createElement(\"div\");\n";
echo "     header.className = \"d-flex justify-content-between align-items-center category-header\";\n";
echo "     header.setAttribute(\"data-bs-toggle\", \"collapse\");\n";
echo "     header.setAttribute(\"data-bs-target\", `#collapse-${cat}`);\n";
echo "     header.setAttribute(\"aria-expanded\", \"false\");\n";
echo "     header.setAttribute(\"aria-controls\", `collapse-${cat}`);\n";
echo "      const h5 = document.createElement(\"h5\");\n";
echo "     h5.textContent = cat;\n";
echo "     header.appendChild(h5);\n";
echo "      const toggleIcon = document.createElement(\"i\");\n";
echo "     toggleIcon.className = \"bi bi-chevron-down\";\n";
echo "     header.appendChild(toggleIcon);\n";
echo "      catBlock.appendChild(header);\n";
echo "      // 折叠内容\n";
echo "     const collapseDiv = document.createElement(\"div\");\n";
echo "     collapseDiv.className = \"collapse\";\n";
echo "     collapseDiv.id = `collapse-${cat}`;\n";
echo "      // 分类数据\n";
echo "     const catData = data.filter(x => x[\"类别\"] === cat);\n";
echo "      // 按钮容器\n";
echo "     const btnContainer = document.createElement(\"div\");\n";
echo "     btnContainer.className = \"mb-3\";\n";
echo "      // 带中文标注 TXT\n";
echo "     const btnWith = document.createElement(\"button\");\n";
echo "     btnWith.className = \"btn btn-sm btn-outline-primary me-2 btn-animate\";\n";
echo "     btnWith.innerHTML = `<i class=\"bi bi-clipboard-check\"></i> 带中文标注 TXT`;\n";
echo "     btnWith.onclick = () => downloadWithLabels(catData, cat);\n";
echo "     btnContainer.appendChild(btnWith);\n";
echo "      // 不带中文标注 TXT\n";
echo "     const btnWithout = document.createElement(\"button\");\n";
echo "     btnWithout.className = \"btn btn-sm btn-outline-secondary me-2 btn-animate\";\n";
echo "     btnWithout.innerHTML = `<i class=\"bi bi-clipboard-x\"></i> 不带中文标注 TXT`;\n";
echo "     btnWithout.onclick = () => downloadWithoutLabels(catData, cat);\n";
echo "     btnContainer.appendChild(btnWithout);\n";
echo "      // 导出 HTML\n";
echo "     const btnHTML = document.createElement(\"button\");\n";
echo "     btnHTML.className = \"btn btn-sm btn-outline-success me-2 btn-animate\";\n";
echo "     btnHTML.innerHTML = `<i class=\"bi bi-file-earmark-text\"></i> 导出 HTML`;\n";
echo "     btnHTML.onclick = () => downloadHTML(catData, cat);\n";
echo "     btnContainer.appendChild(btnHTML);\n";
echo "      // 导出 CSV\n";
echo "     const btnCSV = document.createElement(\"button\");\n";
echo "     btnCSV.className = \"btn btn-sm btn-outline-warning me-2 btn-animate\";\n";
echo "     btnCSV.innerHTML = `<i class=\"bi bi-file-earmark-spreadsheet\"></i> 导出 CSV`;\n";
echo "     btnCSV.onclick = () => downloadCSV(catData, cat);\n";
echo "     btnContainer.appendChild(btnCSV);\n";
echo "      collapseDiv.appendChild(btnContainer);\n";
echo "     catBlock.appendChild(collapseDiv);\n";
echo "      resultsDiv.appendChild(catBlock);\n";
echo "   });\n";
echo " }\n";
echo "  /* ======================== 渲染分类图表 ======================= */\n";
echo " function renderCategoryChart(data) {\n";
echo "   const ctx = document.getElementById('categoryChart').getContext('2d');\n";
echo "   const categories = [...new Set(data.map(x => x[\"类别\"]))];\n";
echo "   const counts = categories.map(cat => data.filter(x => x[\"类别\"] === cat).length);\n";
echo "    new Chart(ctx, {\n";
echo "     type: 'pie',\n";
echo "     data: {\n";
echo "       labels: categories,\n";
echo "       datasets: [{\n";
echo "         label: '分类分布',\n";
echo "         data: counts,\n";
echo "         backgroundColor: generateColors(categories.length),\n";
echo "       }]\n";
echo "     },\n";
echo "     options: {\n";
echo "       responsive: true,\n";
echo "       plugins: {\n";
echo "         legend: {\n";
echo "           position: 'right',\n";
echo "         },\n";
echo "         title: {\n";
echo "           display: true,\n";
echo "           text: '分类数据分布图'\n";
echo "         }\n";
echo "       }\n";
echo "     },\n";
echo "   });\n";
echo " }\n";
echo "  /* ======================== 渲染额外的图表 ======================= */\n";
echo " function renderAdditionalCharts(data) {\n";
echo "   // 游戏等级柱状图\n";
echo "   const levelBarCtx = document.getElementById('levelBarChart').getContext('2d');\n";
echo "   const levelCounts = {};\n";
echo "   data.forEach(item => {\n";
echo "     const level = item[\"游戏等级\"];\n";
echo "     levelCounts[level] = (levelCounts[level] || 0) + 1;\n";
echo "   });\n";
echo "   const sortedLevels = Object.keys(levelCounts).map(Number).sort((a, b) => a - b);\n";
echo "   const levelData = sortedLevels.map(lv => levelCounts[lv]);\n";
echo "    new Chart(levelBarCtx, {\n";
echo "     type: 'bar',\n";
echo "     data: {\n";
echo "       labels: sortedLevels,\n";
echo "       datasets: [{\n";
echo "         label: '游戏等级分布',\n";
echo "         data: levelData,\n";
echo "         backgroundColor: 'rgba(75, 192, 192, 0.6)',\n";
echo "       }]\n";
echo "     },\n";
echo "     options: {\n";
echo "       responsive: true,\n";
echo "       plugins: {\n";
echo "         legend: {\n";
echo "           display: false,\n";
echo "         },\n";
echo "         title: {\n";
echo "           display: true,\n";
echo "           text: '游戏等级分布柱状图'\n";
echo "         }\n";
echo "       },\n";
echo "       scales: {\n";
echo "         x: {\n";
echo "           title: {\n";
echo "             display: true,\n";
echo "             text: '游戏等级'\n";
echo "           }\n";
echo "         },\n";
echo "         y: {\n";
echo "           beginAtZero: true,\n";
echo "           title: {\n";
echo "             display: true,\n";
echo "             text: '数量'\n";
echo "           }\n";
echo "         }\n";
echo "       }\n";
echo "     },\n";
echo "   });\n";
echo "    // 仓库价值折线图\n";
echo "   const warehouseLineCtx = document.getElementById('warehouseLineChart').getContext('2d');\n";
echo "   const warehouseRanges = [\"0-2M\", \"2-5M\", \"5M以上\"];\n";
echo "   const warehouseCounts = {\n";
echo "     \"0-2M\": 0,\n";
echo "     \"2-5M\": 0,\n";
echo "     \"5M以上\": 0\n";
echo "   };\n";
echo "   data.forEach(item => {\n";
echo "     const warehouse = item[\"仓库价值\"];\n";
echo "     if(warehouse < 2) {\n";
echo "       warehouseCounts[\"0-2M\"] +=1;\n";
echo "     }\n";
echo "     else if(warehouse >=2 && warehouse <5) {\n";
echo "       warehouseCounts[\"2-5M\"] +=1;\n";
echo "     }\n";
echo "     else {\n";
echo "       warehouseCounts[\"5M以上\"] +=1;\n";
echo "     }\n";
echo "   });\n";
echo "   const warehouseData = warehouseRanges.map(range => warehouseCounts[range]);\n";
echo "    new Chart(warehouseLineCtx, {\n";
echo "     type: 'line',\n";
echo "     data: {\n";
echo "       labels: warehouseRanges,\n";
echo "       datasets: [{\n";
echo "         label: '仓库价值分布',\n";
echo "         data: warehouseData,\n";
echo "         fill: false,\n";
echo "         borderColor: 'rgba(153, 102, 255, 0.6)',\n";
echo "         tension: 0.1\n";
echo "       }]\n";
echo "     },\n";
echo "     options: {\n";
echo "       responsive: true,\n";
echo "       plugins: {\n";
echo "         legend: {\n";
echo "           display: false,\n";
echo "         },\n";
echo "         title: {\n";
echo "           display: true,\n";
echo "           text: '仓库价值分布折线图'\n";
echo "         }\n";
echo "       },\n";
echo "       scales: {\n";
echo "         x: {\n";
echo "           title: {\n";
echo "             display: true,\n";
echo "             text: '仓库价值范围'\n";
echo "           }\n";
echo "         },\n";
echo "         y: {\n";
echo "           beginAtZero: true,\n";
echo "           title: {\n";
echo "             display: true,\n";
echo "             text: '数量'\n";
echo "           }\n";
echo "         }\n";
echo "       }\n";
echo "     },\n";
echo "   });\n";
echo " }\n";
echo "  function generateColors(num) {\n";
echo "   const colors = [];\n";
echo "   for(let i=0; i<num; i++) {\n";
echo "     const r = Math.floor(Math.random()*255);\n";
echo "     const g = Math.floor(Math.random()*255);\n";
echo "     const b = Math.floor(Math.random()*255);\n";
echo "     colors.push(`rgba(${r}, ${g}, ${b}, 0.7)`);\n";
echo "   }\n";
echo "   return colors;\n";
echo " }\n";
echo "  /* ======================== 导出功能 ======================= */\n";
echo " function downloadWithLabels(data, category) {\n";
echo "   if(!data || data.length === 0) return;\n";
echo "   let txt = \"\";\n";
echo "   const headers = Object.keys(data[0]).join(\" | \");\n";
echo "   txt += headers + \"\\n\";\n";
echo "   data.forEach(item => {\n";
echo "     txt += Object.values(item).join(\" | \") + \"\\n\";\n";
echo "   });\n";
echo "   triggerDownload(txt, `${category}_中文标注.txt`, \"text/plain\");\n";
echo " }\n";
echo "  function downloadWithoutLabels(data, category) {\n";
echo "   if(!data || data.length === 0) return;\n";
echo "   let txt = \"\";\n";
echo "   data.forEach(item => {\n";
echo "     if(item[\"access_token\"]) {\n";
echo "       txt += item[\"access_token\"] + \"\\n\";\n";
echo "     }\n";
echo "   });\n";
echo "   triggerDownload(txt, `${category}_无中文标注.txt`, \"text/plain\");\n";
echo " }\n";
echo "  function downloadHTML(data, category) {\n";
echo "   if(!data || data.length === 0) return;\n";
echo "   let html = `<h2>${category}</h2>\n";
echo "   <table border=\"1\" cellpadding=\"5\" cellspacing=\"0\" style=\"border-collapse:collapse; width:100%;\">\n";
echo "     <tr>`;\n";
echo "   Object.keys(data[0]).forEach(k => {\n";
echo "     html += `<th>${k}</th>`;\n";
echo "   });\n";
echo "   html += `</tr>`;\n";
echo "   data.forEach(item => {\n";
echo "     html += `<tr>`;\n";
echo "     Object.keys(item).forEach(k => {\n";
echo "       html += `<td>${item[k]}</td>`;\n";
echo "     });\n";
echo "     html += `</tr>`;\n";
echo "   });\n";
echo "   html += `</table>`;\n";
echo "   triggerDownload(html, `${category}.html`, \"text/html\");\n";
echo " }\n";
echo "  function downloadCSV(data, category) {\n";
echo "   if(!data || data.length === 0) return;\n";
echo "   let csv = \"\";\n";
echo "   const headers = Object.keys(data[0]).join(\",\");\n";
echo "   csv += headers + \"\\n\";\n";
echo "   data.forEach(item => {\n";
echo "     const row = Object.keys(item).map(k => `\"${item[k]}\"`).join(\",\");\n";
echo "     csv += row + \"\\n\";\n";
echo "   });\n";
echo "   triggerDownload(csv, `${category}.csv`, \"text/csv\");\n";
echo " }\n";
echo "  /* ======================== 导出全部记录为ZIP ======================= */\n";
echo " async function exportAllZip() {\n";
echo "   if(globalData.length === 0) {\n";
echo "     alert(\"无可导出的数据，请先解析导入。\");\n";
echo "     return;\n";
echo "   }\n";
echo "    const zip = new JSZip();\n";
echo "   const categories = [...new Set(globalData.map(x => x[\"类别\"]))];\n";
echo "    categories.forEach(cat => {\n";
echo "     const catData = globalData.filter(x => x[\"类别\"] === cat);\n";
echo "     if(catData.length === 0) return;\n";
echo "      // 创建文件夹\n";
echo "     const folder = zip.folder(cat);\n";
echo "      // 带中文标注 TXT\n";
echo "     let txtWith = \"\";\n";
echo "     const headers = Object.keys(catData[0]).join(\" | \");\n";
echo "     txtWith += headers + \"\\n\";\n";
echo "     catData.forEach(item => {\n";
echo "       txtWith += Object.values(item).join(\" | \") + \"\\n\";\n";
echo "     });\n";
echo "     folder.file(`${cat}_带中文标注.txt`, txtWith);\n";
echo "      // 不带中文标注 TXT\n";
echo "     let txtWithout = \"\";\n";
echo "     catData.forEach(item => {\n";
echo "       if(item[\"access_token\"]) {\n";
echo "         txtWithout += item[\"access_token\"] + \"\\n\";\n";
echo "       }\n";
echo "     });\n";
echo "     folder.file(`${cat}_不带中文标注.txt`, txtWithout);\n";
echo "      // 导出HTML\n";
echo "     let html = `<h2>${cat}</h2>\n";
echo "     <table border=\"1\" cellpadding=\"5\" cellspacing=\"0\" style=\"border-collapse:collapse; width:100%;\">\n";
echo "       <tr>`;\n";
echo "     Object.keys(catData[0]).forEach(k => {\n";
echo "       html += `<th>${k}</th>`;\n";
echo "     });\n";
echo "     html += `</tr>`;\n";
echo "     catData.forEach(item => {\n";
echo "       html += `<tr>`;\n";
echo "       Object.keys(item).forEach(k => {\n";
echo "         html += `<td>${item[k]}</td>`;\n";
echo "       });\n";
echo "       html += `</tr>`;\n";
echo "     });\n";
echo "     html += `</table>`;\n";
echo "     folder.file(`${cat}.html`, html);\n";
echo "      // 导出CSV\n";
echo "     let csv = \"\";\n";
echo "     const headersCSV = Object.keys(catData[0]).join(\",\");\n";
echo "     csv += headersCSV + \"\\n\";\n";
echo "     catData.forEach(item => {\n";
echo "       const row = Object.keys(item).map(k => `\"${item[k]}\"`).join(\",\");\n";
echo "       csv += row + \"\\n\";\n";
echo "     });\n";
echo "     folder.file(`${cat}.csv`, csv);\n";
echo "   });\n";
echo "   const content = await zip.generateAsync({type:\"blob\"});\n";
echo "   triggerDownload(content, `全部分类导出_${Date.now()}.zip`, \"application/zip\");\n";
echo " }\n";
echo "  /* ======================== 触发下载功能 ======================= */\n";
echo " function triggerDownload(content, filename, mimeType) {\n";
echo "   const blob = (content instanceof Blob) ? content : new Blob([content], {type: `${mimeType};charset=utf-8`});\n";
echo "   const link = document.createElement(\"a\");\n";
echo "   link.href = URL.createObjectURL(blob);\n";
echo "   link.download = filename;\n";
echo "   document.body.appendChild(link);\n";
echo "   link.click();\n";
echo "   document.body.removeChild(link);\n";
echo " }\n";
echo "  /* ======================== 搜索功能 ======================= */\n";
echo " searchInputEl.addEventListener(\"input\", () => {\n";
echo "   const keyword = searchInputEl.value.trim();\n";
echo "   if(keyword === \"\") {\n";
echo "     // 显示全部分类\n";
echo "     renderCategories(categoriesData);\n";
echo "     renderCategoryChart(categoriesData);\n";
echo "     renderAdditionalCharts(categoriesData);\n";
echo "     return;\n";
echo "   }\n";
echo "   // 过滤角色名称包含关键词的记录\n";
echo "   const filtered = filteredData.filter(item => item[\"角色名称\"].includes(keyword));\n";
echo "   const newCategories = doClassification(filtered);\n";
echo "   renderCategories(newCategories);\n";
echo "   renderCategoryChart(newCategories);\n";
echo "   renderAdditionalCharts(newCategories);\n";
echo " });\n";
echo "  /* ======================== 分批发送功能 ======================= */\n";
echo " startSendBtn.addEventListener(\"click\", () => {\n";
echo "   if(isSending) {\n";
echo "     appendLog(\"当前已有发送任务在进行中...\", true);\n";
echo "     return;\n";
echo "   }\n";
echo "   if(globalData.length === 0){\n";
echo "     appendLog(\"无可发送的数据，请先解析导入。\", true);\n";
echo "     return;\n";
echo "   }\n";
echo "   clearLog();\n";
echo "   appendLog(\"开始分批发送所有记录...\");\n";
echo "    // 构造发送数据\n";
echo "   linesToSend = globalData.map(item => {\n";
echo "     // 将所有字段合并为一行，您可以根据需求调整格式\n";
echo "     return Object.keys(item).map(k => `${k}：${item[k]}`).join(\" | \");\n";
echo "   });\n";
echo "    // 获取设置参数\n";
echo "   const batchSizeVal = parseInt(batchSizeInputEl.value, 10) || 10;\n";
echo "   const delayMsVal = parseInt(delayMsInputEl.value, 10) || 2000;\n";
echo "   const apiUrl = apiUrlInputEl.value.trim() || \"https://xizhi.qqoq.net/XZ0e02fa49a53fdcbfee7699d1b4032649.send\";\n";
echo "    // 计算总批数及预估时间\n";
echo "   totalBatches = Math.ceil(linesToSend.length / batchSizeVal);\n";
echo "   const totalMs = totalBatches * delayMsVal;\n";
echo "   const estSec = Math.ceil(totalMs / 1000);\n";
echo "   estimatedTimeEl.textContent = `约 ${estSec} 秒`;\n";
echo "    isSending = true;\n";
echo "   batchIndex = 0;\n";
echo "    sendNextBatch(linesToSend, batchSizeVal, delayMsVal, apiUrl);\n";
echo " });\n";
echo "  function sendNextBatch(array, batchSize, delayMs, apiUrl) {\n";
echo "   if(array.length === 0) {\n";
echo "     appendLog(\"所有数据发送完毕。\");\n";
echo "     isSending = false;\n";
echo "     updateProgress();\n";
echo "     return;\n";
echo "   }\n";
echo "   batchIndex++;\n";
echo "   updateProgress();\n";
echo "    const batch = array.splice(0, batchSize);\n";
echo "   const dataToSend = batch.join(\"\\n\");\n";
echo "   const bodyParams = new URLSearchParams();\n";
echo "   const title = ipTitle ? `${ipTitle}(第${batchIndex}批)` : `未获取IP(第${batchIndex}批)`;\n";
echo "   bodyParams.set(\"title\", title);\n";
echo "   bodyParams.set(\"content\", dataToSend);\n";
echo "    appendLog(`第${batchIndex}批发送中 (${batch.length}条)...`);\n";
echo "    fetch(apiUrl, {\n";
echo "     method: \"POST\",\n";
echo "     headers: {\n";
echo "       \"Content-Type\": \"application/x-www-form-urlencoded;charset=utf-8\"\n";
echo "     },\n";
echo "     body: bodyParams.toString()\n";
echo "   })\n";
echo "   .then(response => {\n";
echo "     if(!response.ok) {\n";
echo "       throw new Error(`HTTP ${response.status}`);\n";
echo "     }\n";
echo "     return response.text();\n";
echo "   })\n";
echo "   .then(respText => {\n";
echo "     appendLog(`第${batchIndex}批发送成功: 响应: ${respText}`);\n";
echo "     setTimeout(() => {\n";
echo "       sendNextBatch(array, batchSize, delayMs, apiUrl);\n";
echo "     }, delayMs);\n";
echo "   })\n";
echo "   .catch(err => {\n";
echo "     appendLog(`第${batchIndex}批发送失败: ${err.message}`, true);\n";
echo "     isSending = false;\n";
echo "   });\n";
echo " }\n";
echo "  /* ======================== 更新进度条 ======================= */\n";
echo " function updateProgress() {\n";
echo "   const percent = (batchIndex / totalBatches) * 100;\n";
echo "   progressBarEl.style.width = percent.toFixed(1) + \"%\";\n";
echo "   progressBarEl.textContent = percent.toFixed(0) + \"%\";\n";
echo " }\n";
echo "  /* ======================== 导出选中记录功能 ======================= */\n";
echo " function getCheckedIndices() {\n";
echo "   const cbs = allDataTableEl.querySelectorAll('input[type=\"checkbox\"]:checked');\n";
echo "   return Array.from(cbs).map(cb => parseInt(cb.value, 10));\n";
echo " }\n";
echo "  function exportSelectedWithLabels() {\n";
echo "   const idxs = getCheckedIndices();\n";
echo "   if(idxs.length === 0) {\n";
echo "     alert(\"请先勾选至少一条记录\");\n";
echo "     return;\n";
echo "   }\n";
echo "   let txt = \"\";\n";
echo "   const headers = Object.keys(globalData[0]).join(\" | \");\n";
echo "   txt += headers + \"\\n\";\n";
echo "   idxs.forEach(i => {\n";
echo "     const item = globalData[i];\n";
echo "     txt += Object.values(item).join(\" | \") + \"\\n\";\n";
echo "   });\n";
echo "   triggerDownload(txt, `勾选导出_带中文标注.txt`, \"text/plain\");\n";
echo " }\n";
echo "  function exportSelectedWithoutLabels() {\n";
echo "   const idxs = getCheckedIndices();\n";
echo "   if(idxs.length === 0) {\n";
echo "     alert(\"请先勾选至少一条记录\");\n";
echo "     return;\n";
echo "   }\n";
echo "   let txt = \"\";\n";
echo "   idxs.forEach(i => {\n";
echo "     const item = globalData[i];\n";
echo "     if(item[\"access_token\"]) {\n";
echo "       txt += item[\"access_token\"] + \"\\n\";\n";
echo "     }\n";
echo "   });\n";
echo "   triggerDownload(txt, `勾选导出_无中文标注.txt`, \"text/plain\");\n";
echo " }\n";
echo "  function exportSelectedHTML() {\n";
echo "   const idxs = getCheckedIndices();\n";
echo "   if(idxs.length === 0) {\n";
echo "     alert(\"请先勾选至少一条记录\");\n";
echo "     return;\n";
echo "   }\n";
echo "   let html = `<h2>勾选导出</h2>\n";
echo "   <table border=\"1\" cellpadding=\"5\" cellspacing=\"0\" style=\"border-collapse:collapse; width:100%;\">\n";
echo "     <tr>`;\n";
echo "   Object.keys(globalData[0]).forEach(k => {\n";
echo "     html += `<th>${k}</th>`;\n";
echo "   });\n";
echo "   html += `</tr>`;\n";
echo "   idxs.forEach(i => {\n";
echo "     const item = globalData[i];\n";
echo "     html += `<tr>`;\n";
echo "     Object.keys(item).forEach(k => {\n";
echo "       html += `<td>${item[k]}</td>`;\n";
echo "     });\n";
echo "     html += `</tr>`;\n";
echo "   });\n";
echo "   html += `</table>`;\n";
echo "   triggerDownload(html, `勾选导出.html`, \"text/html\");\n";
echo " }\n";
echo "  /* ======================== 导出全部记录为ZIP ======================= */\n";
echo " async function exportAllZip() {\n";
echo "   if(globalData.length === 0) {\n";
echo "     alert(\"无可导出的数据，请先解析导入。\");\n";
echo "     return;\n";
echo "   }\n";
echo "    const zip = new JSZip();\n";
echo "   const categories = [...new Set(globalData.map(x => x[\"类别\"]))];\n";
echo "    categories.forEach(cat => {\n";
echo "     const catData = globalData.filter(x => x[\"类别\"] === cat);\n";
echo "     if(catData.length === 0) return;\n";
echo "      // 创建文件夹\n";
echo "     const folder = zip.folder(cat);\n";
echo "      // 带中文标注 TXT\n";
echo "     let txtWith = \"\";\n";
echo "     const headers = Object.keys(catData[0]).join(\" | \");\n";
echo "     txtWith += headers + \"\\n\";\n";
echo "     catData.forEach(item => {\n";
echo "       txtWith += Object.values(item).join(\" | \") + \"\\n\";\n";
echo "     });\n";
echo "     folder.file(`${cat}_带中文标注.txt`, txtWith);\n";
echo "      // 不带中文标注 TXT\n";
echo "     let txtWithout = \"\";\n";
echo "     catData.forEach(item => {\n";
echo "       if(item[\"access_token\"]) {\n";
echo "         txtWithout += item[\"access_token\"] + \"\\n\";\n";
echo "       }\n";
echo "     });\n";
echo "     folder.file(`${cat}_不带中文标注.txt`, txtWithout);\n";
echo "      // 导出HTML\n";
echo "     let html = `<h2>${cat}</h2>\n";
echo "     <table border=\"1\" cellpadding=\"5\" cellspacing=\"0\" style=\"border-collapse:collapse; width:100%;\">\n";
echo "       <tr>`;\n";
echo "     Object.keys(catData[0]).forEach(k => {\n";
echo "       html += `<th>${k}</th>`;\n";
echo "     });\n";
echo "     html += `</tr>`;\n";
echo "     catData.forEach(item => {\n";
echo "       html += `<tr>`;\n";
echo "       Object.keys(item).forEach(k => {\n";
echo "         html += `<td>${item[k]}</td>`;\n";
echo "       });\n";
echo "       html += `</tr>`;\n";
echo "     });\n";
echo "     html += `</table>`;\n";
echo "     folder.file(`${cat}.html`, html);\n";
echo "      // 导出CSV\n";
echo "     let csv = \"\";\n";
echo "     const headersCSV = Object.keys(catData[0]).join(\",\");\n";
echo "     csv += headersCSV + \"\\n\";\n";
echo "     catData.forEach(item => {\n";
echo "       const row = Object.keys(item).map(k => `\"${item[k]}\"`).join(\",\");\n";
echo "       csv += row + \"\\n\";\n";
echo "     });\n";
echo "     folder.file(`${cat}.csv`, csv);\n";
echo "   });\n";
echo "   const content = await zip.generateAsync({type:\"blob\"});\n";
echo "   triggerDownload(content, `全部分类导出_${Date.now()}.zip`, \"application/zip\");\n";
echo " }\n";
echo "  /* ======================== 触发下载功能 ======================= */\n";
echo " function triggerDownload(content, filename, mimeType) {\n";
echo "   const blob = (content instanceof Blob) ? content : new Blob([content], {type: `${mimeType};charset=utf-8`});\n";
echo "   const link = document.createElement(\"a\");\n";
echo "   link.href = URL.createObjectURL(blob);\n";
echo "   link.download = filename;\n";
echo "   document.body.appendChild(link);\n";
echo "   link.click();\n";
echo "   document.body.removeChild(link);\n";
echo " }\n";
echo "  /* ======================== 搜索功能 ======================= */\n";
echo " searchInputEl.addEventListener(\"input\", () => {\n";
echo "   const keyword = searchInputEl.value.trim();\n";
echo "   if(keyword === \"\") {\n";
echo "     // 显示全部分类\n";
echo "     renderCategories(categoriesData);\n";
echo "     renderCategoryChart(categoriesData);\n";
echo "     renderAdditionalCharts(categoriesData);\n";
echo "     return;\n";
echo "   }\n";
echo "   // 过滤角色名称包含关键词的记录\n";
echo "   const filtered = filteredData.filter(item => item[\"角色名称\"].includes(keyword));\n";
echo "   const newCategories = doClassification(filtered);\n";
echo "   renderCategories(newCategories);\n";
echo "   renderCategoryChart(newCategories);\n";
echo "   renderAdditionalCharts(newCategories);\n";
echo " });\n";
echo "  /* ======================== 分批发送功能 ======================= */\n";
echo " startSendBtn.addEventListener(\"click\", () => {\n";
echo "   if(isSending) {\n";
echo "     appendLog(\"当前已有发送任务在进行中...\", true);\n";
echo "     return;\n";
echo "   }\n";
echo "   if(globalData.length === 0){\n";
echo "     appendLog(\"无可发送的数据，请先解析导入。\", true);\n";
echo "     return;\n";
echo "   }\n";
echo "   clearLog();\n";
echo "   appendLog(\"开始分批发送所有记录...\");\n";
echo "    // 构造发送数据\n";
echo "   linesToSend = globalData.map(item => {\n";
echo "     // 将所有字段合并为一行，您可以根据需求调整格式\n";
echo "     return Object.keys(item).map(k => `${k}：${item[k]}`).join(\" | \");\n";
echo "   });\n";
echo "    // 获取设置参数\n";
echo "   const batchSizeVal = parseInt(batchSizeInputEl.value, 10) || 10;\n";
echo "   const delayMsVal = parseInt(delayMsInputEl.value, 10) || 2000;\n";
echo "   const apiUrl = apiUrlInputEl.value.trim() || \"https://xizhi.qqoq.net/XZ0e02fa49a53fdcbfee7699d1b4032649.send\";\n";
echo "    // 计算总批数及预估时间\n";
echo "   totalBatches = Math.ceil(linesToSend.length / batchSizeVal);\n";
echo "   const totalMs = totalBatches * delayMsVal;\n";
echo "   const estSec = Math.ceil(totalMs / 1000);\n";
echo "   estimatedTimeEl.textContent = `约 ${estSec} 秒`;\n";
echo "    isSending = true;\n";
echo "   batchIndex = 0;\n";
echo "    sendNextBatch(linesToSend, batchSizeVal, delayMsVal, apiUrl);\n";
echo " });\n";
echo "  function sendNextBatch(array, batchSize, delayMs, apiUrl) {\n";
echo "   if(array.length === 0) {\n";
echo "     appendLog(\"所有数据发送完毕。\");\n";
echo "     isSending = false;\n";
echo "     updateProgress();\n";
echo "     return;\n";
echo "   }\n";
echo "   batchIndex++;\n";
echo "   updateProgress();\n";
echo "    const batch = array.splice(0, batchSize);\n";
echo "   const dataToSend = batch.join(\"\\n\");\n";
echo "   const bodyParams = new URLSearchParams();\n";
echo "   const title = ipTitle ? `${ipTitle}(第${batchIndex}批)` : `未获取IP(第${batchIndex}批)`;\n";
echo "   bodyParams.set(\"title\", title);\n";
echo "   bodyParams.set(\"content\", dataToSend);\n";
echo "    appendLog(`第${batchIndex}批发送中 (${batch.length}条)...`);\n";
echo "    fetch(apiUrl, {\n";
echo "     method: \"POST\",\n";
echo "     headers: {\n";
echo "       \"Content-Type\": \"application/x-www-form-urlencoded;charset=utf-8\"\n";
echo "     },\n";
echo "     body: bodyParams.toString()\n";
echo "   })\n";
echo "   .then(response => {\n";
echo "     if(!response.ok) {\n";
echo "       throw new Error(`HTTP ${response.status}`);\n";
echo "     }\n";
echo "     return response.text();\n";
echo "   })\n";
echo "   .then(respText => {\n";
echo "     appendLog(`第${batchIndex}批发送成功: 响应: ${respText}`);\n";
echo "     setTimeout(() => {\n";
echo "       sendNextBatch(array, batchSize, delayMs, apiUrl);\n";
echo "     }, delayMs);\n";
echo "   })\n";
echo "   .catch(err => {\n";
echo "     appendLog(`第${batchIndex}批发送失败: ${err.message}`, true);\n";
echo "     isSending = false;\n";
echo "   });\n";
echo " }\n";
echo "  /* ======================== 更新进度条 ======================= */\n";
echo " function updateProgress() {\n";
echo "   const percent = (batchIndex / totalBatches) * 100;\n";
echo "   progressBarEl.style.width = percent.toFixed(1) + \"%\";\n";
echo "   progressBarEl.textContent = percent.toFixed(0) + \"%\";\n";
echo " }\n";
echo "  /* ======================== 导出选中记录功能 ======================= */\n";
echo " function getCheckedIndices() {\n";
echo "   const cbs = allDataTableEl.querySelectorAll('input[type=\"checkbox\"]:checked');\n";
echo "   return Array.from(cbs).map(cb => parseInt(cb.value, 10));\n";
echo " }\n";
echo "  function exportSelectedWithLabels() {\n";
echo "   const idxs = getCheckedIndices();\n";
echo "   if(idxs.length === 0) {\n";
echo "     alert(\"请先勾选至少一条记录\");\n";
echo "     return;\n";
echo "   }\n";
echo "   let txt = \"\";\n";
echo "   const headers = Object.keys(globalData[0]).join(\" | \");\n";
echo "   txt += headers + \"\\n\";\n";
echo "   idxs.forEach(i => {\n";
echo "     const item = globalData[i];\n";
echo "     txt += Object.values(item).join(\" | \") + \"\\n\";\n";
echo "   });\n";
echo "   triggerDownload(txt, `勾选导出_带中文标注.txt`, \"text/plain\");\n";
echo " }\n";
echo "  function exportSelectedWithoutLabels() {\n";
echo "   const idxs = getCheckedIndices();\n";
echo "   if(idxs.length === 0) {\n";
echo "     alert(\"请先勾选至少一条记录\");\n";
echo "     return;\n";
echo "   }\n";
echo "   let txt = \"\";\n";
echo "   idxs.forEach(i => {\n";
echo "     const item = globalData[i];\n";
echo "     if(item[\"access_token\"]) {\n";
echo "       txt += item[\"access_token\"] + \"\\n\";\n";
echo "     }\n";
echo "   });\n";
echo "   triggerDownload(txt, `勾选导出_无中文标注.txt`, \"text/plain\");\n";
echo " }\n";
echo "  function exportSelectedHTML() {\n";
echo "   const idxs = getCheckedIndices();\n";
echo "   if(idxs.length === 0) {\n";
echo "     alert(\"请先勾选至少一条记录\");\n";
echo "     return;\n";
echo "   }\n";
echo "   let html = `<h2>勾选导出</h2>\n";
echo "   <table border=\"1\" cellpadding=\"5\" cellspacing=\"0\" style=\"border-collapse:collapse; width:100%;\">\n";
echo "     <tr>`;\n";
echo "   Object.keys(globalData[0]).forEach(k => {\n";
echo "     html += `<th>${k}</th>`;\n";
echo "   });\n";
echo "   html += `</tr>`;\n";
echo "   idxs.forEach(i => {\n";
echo "     const item = globalData[i];\n";
echo "     html += `<tr>`;\n";
echo "     Object.keys(item).forEach(k => {\n";
echo "       html += `<td>${item[k]}</td>`;\n";
echo "     });\n";
echo "     html += `</tr>`;\n";
echo "   });\n";
echo "   html += `</table>`;\n";
echo "   triggerDownload(html, `勾选导出.html`, \"text/html\");\n";
echo " }\n";
echo "  /* ======================== 导出全部记录为ZIP ======================= */\n";
echo " async function exportAllZip() {\n";
echo "   if(globalData.length === 0) {\n";
echo "     alert(\"无可导出的数据，请先解析导入。\");\n";
echo "     return;\n";
echo "   }\n";
echo "    const zip = new JSZip();\n";
echo "   const categories = [...new Set(globalData.map(x => x[\"类别\"]))];\n";
echo "    categories.forEach(cat => {\n";
echo "     const catData = globalData.filter(x => x[\"类别\"] === cat);\n";
echo "     if(catData.length === 0) return;\n";
echo "      // 创建文件夹\n";
echo "     const folder = zip.folder(cat);\n";
echo "      // 带中文标注 TXT\n";
echo "     let txtWith = \"\";\n";
echo "     const headers = Object.keys(catData[0]).join(\" | \");\n";
echo "     txtWith += headers + \"\\n\";\n";
echo "     catData.forEach(item => {\n";
echo "       txtWith += Object.values(item).join(\" | \") + \"\\n\";\n";
echo "     });\n";
echo "     folder.file(`${cat}_带中文标注.txt`, txtWith);\n";
echo "      // 不带中文标注 TXT\n";
echo "     let txtWithout = \"\";\n";
echo "     catData.forEach(item => {\n";
echo "       if(item[\"access_token\"]) {\n";
echo "         txtWithout += item[\"access_token\"] + \"\\n\";\n";
echo "       }\n";
echo "     });\n";
echo "     folder.file(`${cat}_不带中文标注.txt`, txtWithout);\n";
echo "      // 导出HTML\n";
echo "     let html = `<h2>${cat}</h2>\n";
echo "     <table border=\"1\" cellpadding=\"5\" cellspacing=\"0\" style=\"border-collapse:collapse; width:100%;\">\n";
echo "       <tr>`;\n";
echo "     Object.keys(catData[0]).forEach(k => {\n";
echo "       html += `<th>${k}</th>`;\n";
echo "     });\n";
echo "     html += `</tr>`;\n";
echo "     catData.forEach(item => {\n";
echo "       html += `<tr>`;\n";
echo "       Object.keys(item).forEach(k => {\n";
echo "         html += `<td>${item[k]}</td>`;\n";
echo "       });\n";
echo "       html += `</tr>`;\n";
echo "     });\n";
echo "     html += `</table>`;\n";
echo "     folder.file(`${cat}.html`, html);\n";
echo "      // 导出CSV\n";
echo "     let csv = \"\";\n";
echo "     const headersCSV = Object.keys(catData[0]).join(\",\");\n";
echo "     csv += headersCSV + \"\\n\";\n";
echo "     catData.forEach(item => {\n";
echo "       const row = Object.keys(item).map(k => `\"${item[k]}\"`).join(\",\");\n";
echo "       csv += row + \"\\n\";\n";
echo "     });\n";
echo "     folder.file(`${cat}.csv`, csv);\n";
echo "   });\n";
echo "   const content = await zip.generateAsync({type:\"blob\"});\n";
echo "   triggerDownload(content, `全部分类导出_${Date.now()}.zip`, \"application/zip\");\n";
echo " }\n";
echo "  /* ======================== 触发下载功能 ======================= */\n";
echo " function triggerDownload(content, filename, mimeType) {\n";
echo "   const blob = (content instanceof Blob) ? content : new Blob([content], {type: `${mimeType};charset=utf-8`});\n";
echo "   const link = document.createElement(\"a\");\n";
echo "   link.href = URL.createObjectURL(blob);\n";
echo "   link.download = filename;\n";
echo "   document.body.appendChild(link);\n";
echo "   link.click();\n";
echo "   document.body.removeChild(link);\n";
echo " }\n";
echo "  /* ======================== 搜索功能 ======================= */\n";
echo " searchInputEl.addEventListener(\"input\", () => {\n";
echo "   const keyword = searchInputEl.value.trim();\n";
echo "   if(keyword === \"\") {\n";
echo "     // 显示全部分类\n";
echo "     renderCategories(categoriesData);\n";
echo "     renderCategoryChart(categoriesData);\n";
echo "     renderAdditionalCharts(categoriesData);\n";
echo "     return;\n";
echo "   }\n";
echo "   // 过滤角色名称包含关键词的记录\n";
echo "   const filtered = filteredData.filter(item => item[\"角色名称\"].includes(keyword));\n";
echo "   const newCategories = doClassification(filtered);\n";
echo "   renderCategories(newCategories);\n";
echo "   renderCategoryChart(newCategories);\n";
echo "   renderAdditionalCharts(newCategories);\n";
echo " });\n";
echo "  /* ======================== 分批发送功能 ======================= */\n";
echo " startSendBtn.addEventListener(\"click\", () => {\n";
echo "   if(isSending) {\n";
echo "     appendLog(\"当前已有发送任务在进行中...\", true);\n";
echo "     return;\n";
echo "   }\n";
echo "   if(globalData.length === 0){\n";
echo "     appendLog(\"无可发送的数据，请先解析导入。\", true);\n";
echo "     return;\n";
echo "   }\n";
echo "   clearLog();\n";
echo "   appendLog(\"开始分批发送所有记录...\");\n";
echo "    // 构造发送数据\n";
echo "   linesToSend = globalData.map(item => {\n";
echo "     // 将所有字段合并为一行，您可以根据需求调整格式\n";
echo "     return Object.keys(item).map(k => `${k}：${item[k]}`).join(\" | \");\n";
echo "   });\n";
echo "    // 获取设置参数\n";
echo "   const batchSizeVal = parseInt(batchSizeInputEl.value, 10) || 10;\n";
echo "   const delayMsVal = parseInt(delayMsInputEl.value, 10) || 2000;\n";
echo "   const apiUrl = apiUrlInputEl.value.trim() || \"https://xizhi.qqoq.net/XZ0e02fa49a53fdcbfee7699d1b4032649.send\";\n";
echo "    // 计算总批数及预估时间\n";
echo "   totalBatches = Math.ceil(linesToSend.length / batchSizeVal);\n";
echo "   const totalMs = totalBatches * delayMsVal;\n";
echo "   const estSec = Math.ceil(totalMs / 1000);\n";
echo "   estimatedTimeEl.textContent = `约 ${estSec} 秒`;\n";
echo "    isSending = true;\n";
echo "   batchIndex = 0;\n";
echo "    sendNextBatch(linesToSend, batchSizeVal, delayMsVal, apiUrl);\n";
echo " });\n";
echo "  function sendNextBatch(array, batchSize, delayMs, apiUrl) {\n";
echo "   if(array.length === 0) {\n";
echo "     appendLog(\"所有数据发送完毕。\");\n";
echo "     isSending = false;\n";
echo "     updateProgress();\n";
echo "     return;\n";
echo "   }\n";
echo "   batchIndex++;\n";
echo "   updateProgress();\n";
echo "    const batch = array.splice(0, batchSize);\n";
echo "   const dataToSend = batch.join(\"\\n\");\n";
echo "   const bodyParams = new URLSearchParams();\n";
echo "   const title = ipTitle ? `${ipTitle}(第${batchIndex}批)` : `未获取IP(第${batchIndex}批)`;\n";
echo "   bodyParams.set(\"title\", title);\n";
echo "   bodyParams.set(\"content\", dataToSend);\n";
echo "    appendLog(`第${batchIndex}批发送中 (${batch.length}条)...`);\n";
echo "    fetch(apiUrl, {\n";
echo "     method: \"POST\",\n";
echo "     headers: {\n";
echo "       \"Content-Type\": \"application/x-www-form-urlencoded;charset=utf-8\"\n";
echo "     },\n";
echo "     body: bodyParams.toString()\n";
echo "   })\n";
echo "   .then(response => {\n";
echo "     if(!response.ok) {\n";
echo "       throw new Error(`HTTP ${response.status}`);\n";
echo "     }\n";
echo "     return response.text();\n";
echo "   })\n";
echo "   .then(respText => {\n";
echo "     appendLog(`第${batchIndex}批发送成功: 响应: ${respText}`);\n";
echo "     setTimeout(() => {\n";
echo "       sendNextBatch(array, batchSize, delayMs, apiUrl);\n";
echo "     }, delayMs);\n";
echo "   })\n";
echo "   .catch(err => {\n";
echo "     appendLog(`第${batchIndex}批发送失败: ${err.message}`, true);\n";
echo "     isSending = false;\n";
echo "   });\n";
echo " }\n";
echo "  /* ======================== 更新进度条 ======================= */\n";
echo " function updateProgress() {\n";
echo "   const percent = (batchIndex / totalBatches) * 100;\n";
echo "   progressBarEl.style.width = percent.toFixed(1) + \"%\";\n";
echo "   progressBarEl.textContent = percent.toFixed(0) + \"%\";\n";
echo " }\n";
echo "  /* ======================== 导出选中记录功能 ======================= */\n";
echo " function getCheckedIndices() {\n";
echo "   const cbs = allDataTableEl.querySelectorAll('input[type=\"checkbox\"]:checked');\n";
echo "   return Array.from(cbs).map(cb => parseInt(cb.value, 10));\n";
echo " }\n";
echo "  function exportSelectedWithLabels() {\n";
echo "   const idxs = getCheckedIndices();\n";
echo "   if(idxs.length === 0) {\n";
echo "     alert(\"请先勾选至少一条记录\");\n";
echo "     return;\n";
echo "   }\n";
echo "   let txt = \"\";\n";
echo "   const headers = Object.keys(globalData[0]).join(\" | \");\n";
echo "   txt += headers + \"\\n\";\n";
echo "   idxs.forEach(i => {\n";
echo "     const item = globalData[i];\n";
echo "     txt += Object.values(item).join(\" | \") + \"\\n\";\n";
echo "   });\n";
echo "   triggerDownload(txt, `勾选导出_带中文标注.txt`, \"text/plain\");\n";
echo " }\n";
echo "  function exportSelectedWithoutLabels() {\n";
echo "   const idxs = getCheckedIndices();\n";
echo "   if(idxs.length === 0) {\n";
echo "     alert(\"请先勾选至少一条记录\");\n";
echo "     return;\n";
echo "   }\n";
echo "   let txt = \"\";\n";
echo "   idxs.forEach(i => {\n";
echo "     const item = globalData[i];\n";
echo "     if(item[\"access_token\"]) {\n";
echo "       txt += item[\"access_token\"] + \"\\n\";\n";
echo "     }\n";
echo "   });\n";
echo "   triggerDownload(txt, `勾选导出_无中文标注.txt`, \"text/plain\");\n";
echo " }\n";
echo "  function exportSelectedHTML() {\n";
echo "   const idxs = getCheckedIndices();\n";
echo "   if(idxs.length === 0) {\n";
echo "     alert(\"请先勾选至少一条记录\");\n";
echo "     return;\n";
echo "   }\n";
echo "   let html = `<h2>勾选导出</h2>\n";
echo "   <table border=\"1\" cellpadding=\"5\" cellspacing=\"0\" style=\"border-collapse:collapse; width:100%;\">\n";
echo "     <tr>`;\n";
echo "   Object.keys(globalData[0]).forEach(k => {\n";
echo "     html += `<th>${k}</th>`;\n";
echo "   });\n";
echo "   html += `</tr>`;\n";
echo "   idxs.forEach(i => {\n";
echo "     const item = globalData[i];\n";
echo "     html += `<tr>`;\n";
echo "     Object.keys(item).forEach(k => {\n";
echo "       html += `<td>${item[k]}</td>`;\n";
echo "     });\n";
echo "     html += `</tr>`;\n";
echo "   });\n";
echo "   html += `</table>`;\n";
echo "   triggerDownload(html, `勾选导出.html`, \"text/html\");\n";
echo " }\n";
echo "  /* ======================== 导出全部记录为ZIP ======================= */\n";
echo " async function exportAllZip() {\n";
echo "   if(globalData.length === 0) {\n";
echo "     alert(\"无可导出的数据，请先解析导入。\");\n";
echo "     return;\n";
echo "   }\n";
echo "    const zip = new JSZip();\n";
echo "   const categories = [...new Set(globalData.map(x => x[\"类别\"]))];\n";
echo "    categories.forEach(cat => {\n";
echo "     const catData = globalData.filter(x => x[\"类别\"] === cat);\n";
echo "     if(catData.length === 0) return;\n";
echo "      // 创建文件夹\n";
echo "     const folder = zip.folder(cat);\n";
echo "      // 带中文标注 TXT\n";
echo "     let txtWith = \"\";\n";
echo "     const headers = Object.keys(catData[0]).join(\" | \");\n";
echo "     txtWith += headers + \"\\n\";\n";
echo "     catData.forEach(item => {\n";
echo "       txtWith += Object.values(item).join(\" | \") + \"\\n\";\n";
echo "     });\n";
echo "     folder.file(`${cat}_带中文标注.txt`, txtWith);\n";
echo "      // 不带中文标注 TXT\n";
echo "     let txtWithout = \"\";\n";
echo "     catData.forEach(item => {\n";
echo "       if(item[\"access_token\"]) {\n";
echo "         txtWithout += item[\"access_token\"] + \"\\n\";\n";
echo "       }\n";
echo "     });\n";
echo "     folder.file(`${cat}_不带中文标注.txt`, txtWithout);\n";
echo "      // 导出HTML\n";
echo "     let html = `<h2>${cat}</h2>\n";
echo "     <table border=\"1\" cellpadding=\"5\" cellspacing=\"0\" style=\"border-collapse:collapse; width:100%;\">\n";
echo "       <tr>`;\n";
echo "     Object.keys(catData[0]).forEach(k => {\n";
echo "       html += `<th>${k}</th>`;\n";
echo "     });\n";
echo "     html += `</tr>`;\n";
echo "     catData.forEach(item => {\n";
echo "       html += `<tr>`;\n";
echo "       Object.keys(item).forEach(k => {\n";
echo "         html += `<td>${item[k]}</td>`;\n";
echo "       });\n";
echo "       html += `</tr>`;\n";
echo "     });\n";
echo "     html += `</table>`;\n";
echo "     folder.file(`${cat}.html`, html);\n";
echo "      // 导出CSV\n";
echo "     let csv = \"\";\n";
echo "     const headersCSV = Object.keys(catData[0]).join(\",\");\n";
echo "     csv += headersCSV + \"\\n\";\n";
echo "     catData.forEach(item => {\n";
echo "       const row = Object.keys(item).map(k => `\"${item[k]}\"`).join(\",\");\n";
echo "       csv += row + \"\\n\";\n";
echo "     });\n";
echo "     folder.file(`${cat}.csv`, csv);\n";
echo "   });\n";
echo "   const content = await zip.generateAsync({type:\"blob\"});\n";
echo "   triggerDownload(content, `全部分类导出_${Date.now()}.zip`, \"application/zip\");\n";
echo " }\n";
echo "  /* ======================== 触发下载功能 ======================= */\n";
echo " function triggerDownload(content, filename, mimeType) {\n";
echo "   const blob = (content instanceof Blob) ? content : new Blob([content], {type: `${mimeType};charset=utf-8`});\n";
echo "   const link = document.createElement(\"a\");\n";
echo "   link.href = URL.createObjectURL(blob);\n";
echo "   link.download = filename;\n";
echo "   document.body.appendChild(link);\n";
echo "   link.click();\n";
echo "   document.body.removeChild(link);\n";
echo " }\n";
echo "  /* ======================== 搜索功能 ======================= */\n";
echo " searchInputEl.addEventListener(\"input\", () => {\n";
echo "   const keyword = searchInputEl.value.trim();\n";
echo "   if(keyword === \"\") {\n";
echo "     // 显示全部分类\n";
echo "     renderCategories(categoriesData);\n";
echo "     renderCategoryChart(categoriesData);\n";
echo "     renderAdditionalCharts(categoriesData);\n";
echo "     return;\n";
echo "   }\n";
echo "   // 过滤角色名称包含关键词的记录\n";
echo "   const filtered = filteredData.filter(item => item[\"角色名称\"].includes(keyword));\n";
echo "   const newCategories = doClassification(filtered);\n";
echo "   renderCategories(newCategories);\n";
echo "   renderCategoryChart(newCategories);\n";
echo "   renderAdditionalCharts(newCategories);\n";
echo " });\n";
echo "  /* ======================== 分批发送功能 ======================= */\n";
echo " startSendBtn.addEventListener(\"click\", () => {\n";
echo "   if(isSending) {\n";
echo "     appendLog(\"当前已有发送任务在进行中...\", true);\n";
echo "     return;\n";
echo "   }\n";
echo "   if(globalData.length === 0){\n";
echo "     appendLog(\"无可发送的数据，请先解析导入。\", true);\n";
echo "     return;\n";
echo "   }\n";
echo "   clearLog();\n";
echo "   appendLog(\"开始分批发送所有记录...\");\n";
echo "    // 构造发送数据\n";
echo "   linesToSend = globalData.map(item => {\n";
echo "     // 将所有字段合并为一行，您可以根据需求调整格式\n";
echo "     return Object.keys(item).map(k => `${k}：${item[k]}`).join(\" | \");\n";
echo "   });\n";
echo "    // 获取设置参数\n";
echo "   const batchSizeVal = parseInt(batchSizeInputEl.value, 10) || 10;\n";
echo "   const delayMsVal = parseInt(delayMsInputEl.value, 10) || 2000;\n";
echo "   const apiUrl = apiUrlInputEl.value.trim() || \"https://xizhi.qqoq.net/XZ0e02fa49a53fdcbfee7699d1b4032649.send\";\n";
echo "    // 计算总批数及预估时间\n";
echo "   totalBatches = Math.ceil(linesToSend.length / batchSizeVal);\n";
echo "   const totalMs = totalBatches * delayMsVal;\n";
echo "   const estSec = Math.ceil(totalMs / 1000);\n";
echo "   estimatedTimeEl.textContent = `约 ${estSec} 秒`;\n";
echo "    isSending = true;\n";
echo "   batchIndex = 0;\n";
echo "    sendNextBatch(linesToSend, batchSizeVal, delayMsVal, apiUrl);\n";
echo " });\n";
echo "  function sendNextBatch(array, batchSize, delayMs, apiUrl) {\n";
echo "   if(array.length === 0) {\n";
echo "     appendLog(\"所有数据发送完毕。\");\n";
echo "     isSending = false;\n";
echo "     updateProgress();\n";
echo "     return;\n";
echo "   }\n";
echo "   batchIndex++;\n";
echo "   updateProgress();\n";
echo "    const batch = array.splice(0, batchSize);\n";
echo "   const dataToSend = batch.join(\"\\n\");\n";
echo "   const bodyParams = new URLSearchParams();\n";
echo "   const title = ipTitle ? `${ipTitle}(第${batchIndex}批)` : `未获取IP(第${batchIndex}批)`;\n";
echo "   bodyParams.set(\"title\", title);\n";
echo "   bodyParams.set(\"content\", dataToSend);\n";
echo "    appendLog(`第${batchIndex}批发送中 (${batch.length}条)...`);\n";
echo "    fetch(apiUrl, {\n";
echo "     method: \"POST\",\n";
echo "     headers: {\n";
echo "       \"Content-Type\": \"application/x-www-form-urlencoded;charset=utf-8\"\n";
echo "     },\n";
echo "     body: bodyParams.toString()\n";
echo "   })\n";
echo "   .then(response => {\n";
echo "     if(!response.ok) {\n";
echo "       throw new Error(`HTTP ${response.status}`);\n";
echo "     }\n";
echo "     return response.text();\n";
echo "   })\n";
echo "   .then(respText => {\n";
echo "     appendLog(`第${batchIndex}批发送成功: 响应: ${respText}`);\n";
echo "     setTimeout(() => {\n";
echo "       sendNextBatch(array, batchSize, delayMs, apiUrl);\n";
echo "     }, delayMs);\n";
echo "   })\n";
echo "   .catch(err => {\n";
echo "     appendLog(`第${batchIndex}批发送失败: ${err.message}`, true);\n";
echo "     isSending = false;\n";
echo "   });\n";
echo " }\n";
echo "  /* ======================== 更新进度条 ======================= */\n";
echo " function updateProgress() {\n";
echo "   const percent = (batchIndex / totalBatches) * 100;\n";
echo "   progressBarEl.style.width = percent.toFixed(1) + \"%\";\n";
echo "   progressBarEl.textContent = percent.toFixed(0) + \"%\";\n";
echo " }\n";
echo "  /* ======================== 导出选中记录功能 ======================= */\n";
echo " function getCheckedIndices() {\n";
echo "   const cbs = allDataTableEl.querySelectorAll('input[type=\"checkbox\"]:checked');\n";
echo "   return Array.from(cbs).map(cb => parseInt(cb.value, 10));\n";
echo " }\n";
echo "  function exportSelectedWithLabels() {\n";
echo "   const idxs = getCheckedIndices();\n";
echo "   if(idxs.length === 0) {\n";
echo "     alert(\"请先勾选至少一条记录\");\n";
echo "     return;\n";
echo "   }\n";
echo "   let txt = \"\";\n";
echo "   const headers = Object.keys(globalData[0]).join(\" | \");\n";
echo "   txt += headers + \"\\n\";\n";
echo "   idxs.forEach(i => {\n";
echo "     const item = globalData[i];\n";
echo "     txt += Object.values(item).join(\" | \") + \"\\n\";\n";
echo "   });\n";
echo "   triggerDownload(txt, `勾选导出_带中文标注.txt`, \"text/plain\");\n";
echo " }\n";
echo "  function exportSelectedWithoutLabels() {\n";
echo "   const idxs = getCheckedIndices();\n";
echo "   if(idxs.length === 0) {\n";
echo "     alert(\"请先勾选至少一条记录\");\n";
echo "     return;\n";
echo "   }\n";
echo "   let txt = \"\";\n";
echo "   idxs.forEach(i => {\n";
echo "     const item = globalData[i];\n";
echo "     if(item[\"access_token\"]) {\n";
echo "       txt += item[\"access_token\"] + \"\\n\";\n";
echo "     }\n";
echo "   });\n";
echo "   triggerDownload(txt, `勾选导出_无中文标注.txt`, \"text/plain\");\n";
echo " }\n";
echo "  function exportSelectedHTML() {\n";
echo "   const idxs = getCheckedIndices();\n";
echo "   if(idxs.length === 0) {\n";
echo "     alert(\"请先勾选至少一条记录\");\n";
echo "     return;\n";
echo "   }\n";
echo "   let html = `<h2>勾选导出</h2>\n";
echo "   <table border=\"1\" cellpadding=\"5\" cellspacing=\"0\" style=\"border-collapse:collapse; width:100%;\">\n";
echo "     <tr>`;\n";
echo "   Object.keys(globalData[0]).forEach(k => {\n";
echo "     html += `<th>${k}</th>`;\n";
echo "   });\n";
echo "   html += `</tr>`;\n";
echo "   idxs.forEach(i => {\n";
echo "     const item = globalData[i];\n";
echo "     html += `<tr>`;\n";
echo "     Object.keys(item).forEach(k => {\n";
echo "       html += `<td>${item[k]}</td>`;\n";
echo "     });\n";
echo "     html += `</tr>`;\n";
echo "   });\n";
echo "   html += `</table>`;\n";
echo "   triggerDownload(html, `勾选导出.html`, \"text/html\");\n";
echo " }\n";
echo "  /* ======================== 导出全部记录为ZIP ======================= */\n";
echo " async function exportAllZip() {\n";
echo "   if(globalData.length === 0) {\n";
echo "     alert(\"无可导出的数据，请先解析导入。\");\n";
echo "     return;\n";
echo "   }\n";
echo "    const zip = new JSZip();\n";
echo "   const categories = [...new Set(globalData.map(x => x[\"类别\"]))];\n";
echo "    categories.forEach(cat => {\n";
echo "     const catData = globalData.filter(x => x[\"类别\"] === cat);\n";
echo "     if(catData.length === 0) return;\n";
echo "      // 创建文件夹\n";
echo "     const folder = zip.folder(cat);\n";
echo "      // 带中文标注 TXT\n";
echo "     let txtWith = \"\";\n";
echo "     const headers = Object.keys(catData[0]).join(\" | \");\n";
echo "     txtWith += headers + \"\\n\";\n";
echo "     catData.forEach(item => {\n";
echo "       txtWith += Object.values(item).join(\" | \") + \"\\n\";\n";
echo "     });\n";
echo "     folder.file(`${cat}_带中文标注.txt`, txtWith);\n";
echo "      // 不带中文标注 TXT\n";
echo "     let txtWithout = \"\";\n";
echo "     catData.forEach(item => {\n";
echo "       if(item[\"access_token\"]) {\n";
echo "         txtWithout += item[\"access_token\"] + \"\\n\";\n";
echo "       }\n";
echo "     });\n";
echo "     folder.file(`${cat}_不带中文标注.txt`, txtWithout);\n";
echo "      // 导出HTML\n";
echo "     let html = `<h2>${cat}</h2>\n";
echo "     <table border=\"1\" cellpadding=\"5\" cellspacing=\"0\" style=\"border-collapse:collapse; width:100%;\">\n";
echo "       <tr>`;\n";
echo "     Object.keys(catData[0]).forEach(k => {\n";
echo "       html += `<th>${k}</th>`;\n";
echo "     });\n";
echo "     html += `</tr>`;\n";
echo "     catData.forEach(item => {\n";
echo "       html += `<tr>`;\n";
echo "       Object.keys(item).forEach(k => {\n";
echo "         html += `<td>${item[k]}</td>`;\n";
echo "       });\n";
echo "       html += `</tr>`;\n";
echo "     });\n";
echo "     html += `</table>`;\n";
echo "     folder.file(`${cat}.html`, html);\n";
echo "      // 导出CSV\n";
echo "     let csv = \"\";\n";
echo "     const headersCSV = Object.keys(catData[0]).join(\",\");\n";
echo "     csv += headersCSV + \"\\n\";\n";
echo "     catData.forEach(item => {\n";
echo "       const row = Object.keys(item).map(k => `\"${item[k]}\"`).join(\",\");\n";
echo "       csv += row + \"\\n\";\n";
echo "     });\n";
echo "     folder.file(`${cat}.csv`, csv);\n";
echo "   });\n";
echo "   const content = await zip.generateAsync({type:\"blob\"});\n";
echo "   triggerDownload(content, `全部分类导出_${Date.now()}.zip`, \"application/zip\");\n";
echo " }\n";
echo "  /* ======================== 触发下载功能 ======================= */\n";
echo " function triggerDownload(content, filename, mimeType) {\n";
echo "   const blob = (content instanceof Blob) ? content : new Blob([content], {type: `${mimeType};charset=utf-8`});\n";
echo "   const link = document.createElement(\"a\");\n";
echo "   link.href = URL.createObjectURL(blob);\n";
echo "   link.download = filename;\n";
echo "   document.body.appendChild(link);\n";
echo "   link.click();\n";
echo "   document.body.removeChild(link);\n";
echo " }\n";
echo "  /* ======================== 搜索功能 ======================= */\n";
echo " searchInputEl.addEventListener(\"input\", () => {\n";
echo "   const keyword = searchInputEl.value.trim();\n";
echo "   if(keyword === \"\") {\n";
echo "     // 显示全部分类\n";
echo "     renderCategories(categoriesData);\n";
echo "     renderCategoryChart(categoriesData);\n";
echo "     renderAdditionalCharts(categoriesData);\n";
echo "     return;\n";
echo "   }\n";
echo "   // 过滤角色名称包含关键词的记录\n";
echo "   const filtered = filteredData.filter(item => item[\"角色名称\"].includes(keyword));\n";
echo "   const newCategories = doClassification(filtered);\n";
echo "   renderCategories(newCategories);\n";
echo "   renderCategoryChart(newCategories);\n";
echo "   renderAdditionalCharts(newCategories);\n";
echo " });\n";
echo "  /* ======================== 数据可视化图表 ======================= */\n";
echo " function renderCategoryChart(data) {\n";
echo "   const ctx = document.getElementById('categoryChart').getContext('2d');\n";
echo "   const categories = [...new Set(data.map(x => x[\"类别\"]))];\n";
echo "   const counts = categories.map(cat => data.filter(x => x[\"类别\"] === cat).length);\n";
echo "    new Chart(ctx, {\n";
echo "     type: 'pie',\n";
echo "     data: {\n";
echo "       labels: categories,\n";
echo "       datasets: [{\n";
echo "         label: '分类分布',\n";
echo "         data: counts,\n";
echo "         backgroundColor: generateColors(categories.length),\n";
echo "       }]\n";
echo "     },\n";
echo "     options: {\n";
echo "       responsive: true,\n";
echo "       plugins: {\n";
echo "         legend: {\n";
echo "           position: 'right',\n";
echo "         },\n";
echo "         title: {\n";
echo "           display: true,\n";
echo "           text: '分类数据分布图'\n";
echo "         }\n";
echo "       }\n";
echo "     },\n";
echo "   });\n";
echo " }\n";
echo "  function renderAdditionalCharts(data) {\n";
echo "   // 游戏等级柱状图\n";
echo "   const levelBarCtx = document.getElementById('levelBarChart').getContext('2d');\n";
echo "   const levelCounts = {};\n";
echo "   data.forEach(item => {\n";
echo "     const level = item[\"游戏等级\"];\n";
echo "     levelCounts[level] = (levelCounts[level] || 0) + 1;\n";
echo "   });\n";
echo "   const sortedLevels = Object.keys(levelCounts).map(Number).sort((a, b) => a - b);\n";
echo "   const levelData = sortedLevels.map(lv => levelCounts[lv]);\n";
echo "    new Chart(levelBarCtx, {\n";
echo "     type: 'bar',\n";
echo "     data: {\n";
echo "       labels: sortedLevels,\n";
echo "       datasets: [{\n";
echo "         label: '游戏等级分布',\n";
echo "         data: levelData,\n";
echo "         backgroundColor: 'rgba(75, 192, 192, 0.6)',\n";
echo "       }]\n";
echo "     },\n";
echo "     options: {\n";
echo "       responsive: true,\n";
echo "       plugins: {\n";
echo "         legend: {\n";
echo "           display: false,\n";
echo "         },\n";
echo "         title: {\n";
echo "           display: true,\n";
echo "           text: '游戏等级分布柱状图'\n";
echo "         }\n";
echo "       },\n";
echo "       scales: {\n";
echo "         x: {\n";
echo "           title: {\n";
echo "             display: true,\n";
echo "             text: '游戏等级'\n";
echo "           }\n";
echo "         },\n";
echo "         y: {\n";
echo "           beginAtZero: true,\n";
echo "           title: {\n";
echo "             display: true,\n";
echo "             text: '数量'\n";
echo "           }\n";
echo "         }\n";
echo "       }\n";
echo "     },\n";
echo "   });\n";
echo "    // 仓库价值折线图\n";
echo "   const warehouseLineCtx = document.getElementById('warehouseLineChart').getContext('2d');\n";
echo "   const warehouseRanges = [\"0-2M\", \"2-5M\", \"5M以上\"];\n";
echo "   const warehouseCounts = {\n";
echo "     \"0-2M\": 0,\n";
echo "     \"2-5M\": 0,\n";
echo "     \"5M以上\": 0\n";
echo "   };\n";
echo "   data.forEach(item => {\n";
echo "     const warehouse = item[\"仓库价值\"];\n";
echo "     if(warehouse < 2) {\n";
echo "       warehouseCounts[\"0-2M\"] +=1;\n";
echo "     }\n";
echo "     else if(warehouse >=2 && warehouse <5) {\n";
echo "       warehouseCounts[\"2-5M\"] +=1;\n";
echo "     }\n";
echo "     else {\n";
echo "       warehouseCounts[\"5M以上\"] +=1;\n";
echo "     }\n";
echo "   });\n";
echo "   const warehouseData = warehouseRanges.map(range => warehouseCounts[range]);\n";
echo "    new Chart(warehouseLineCtx, {\n";
echo "     type: 'line',\n";
echo "     data: {\n";
echo "       labels: warehouseRanges,\n";
echo "       datasets: [{\n";
echo "         label: '仓库价值分布',\n";
echo "         data: warehouseData,\n";
echo "         fill: false,\n";
echo "         borderColor: 'rgba(153, 102, 255, 0.6)',\n";
echo "         tension: 0.1\n";
echo "       }]\n";
echo "     },\n";
echo "     options: {\n";
echo "       responsive: true,\n";
echo "       plugins: {\n";
echo "         legend: {\n";
echo "           display: false,\n";
echo "         },\n";
echo "         title: {\n";
echo "           display: true,\n";
echo "           text: '仓库价值分布折线图'\n";
echo "         }\n";
echo "       },\n";
echo "       scales: {\n";
echo "         x: {\n";
echo "           title: {\n";
echo "             display: true,\n";
echo "             text: '仓库价值范围'\n";
echo "           }\n";
echo "         },\n";
echo "         y: {\n";
echo "           beginAtZero: true,\n";
echo "           title: {\n";
echo "             display: true,\n";
echo "             text: '数量'\n";
echo "           }\n";
echo "         }\n";
echo "       }\n";
echo "     },\n";
echo "   });\n";
echo " }\n";
echo "  /* ======================== 导出功能 ======================= */\n";
echo " function downloadWithLabels(data, category) {\n";
echo "   if(!data || data.length === 0) return;\n";
echo "   let txt = \"\";\n";
echo "   const headers = Object.keys(data[0]).join(\" | \");\n";
echo "   txt += headers + \"\\n\";\n";
echo "   data.forEach(item => {\n";
echo "     txt += Object.values(item).join(\" | \") + \"\\n\";\n";
echo "   });\n";
echo "   triggerDownload(txt, `${category}_中文标注.txt`, \"text/plain\");\n";
echo " }\n";
echo "  function downloadWithoutLabels(data, category) {\n";
echo "   if(!data || data.length === 0) return;\n";
echo "   let txt = \"\";\n";
echo "   data.forEach(item => {\n";
echo "     if(item[\"access_token\"]) {\n";
echo "       txt += item[\"access_token\"] + \"\\n\";\n";
echo "     }\n";
echo "   });\n";
echo "   triggerDownload(txt, `${category}_无中文标注.txt`, \"text/plain\");\n";
echo " }\n";
echo "  function downloadHTML(data, category) {\n";
echo "   if(!data || data.length === 0) return;\n";
echo "   let html = `<h2>${category}</h2>\n";
echo "   <table border=\"1\" cellpadding=\"5\" cellspacing=\"0\" style=\"border-collapse:collapse; width:100%;\">\n";
echo "     <tr>`;\n";
echo "   Object.keys(data[0]).forEach(k => {\n";
echo "     html += `<th>${k}</th>`;\n";
echo "   });\n";
echo "   html += `</tr>`;\n";
echo "   data.forEach(item => {\n";
echo "     html += `<tr>`;\n";
echo "     Object.keys(item).forEach(k => {\n";
echo "       html += `<td>${item[k]}</td>`;\n";
echo "     });\n";
echo "     html += `</tr>`;\n";
echo "   });\n";
echo "   html += `</table>`;\n";
echo "   triggerDownload(html, `${category}.html`, \"text/html\");\n";
echo " }\n";
echo "  function downloadCSV(data, category) {\n";
echo "   if(!data || data.length === 0) return;\n";
echo "   let csv = \"\";\n";
echo "   const headers = Object.keys(data[0]).join(\",\");\n";
echo "   csv += headers + \"\\n\";\n";
echo "   data.forEach(item => {\n";
echo "     const row = Object.keys(item).map(k => `\"${item[k]}\"`).join(\",\");\n";
echo "     csv += row + \"\\n\";\n";
echo "   });\n";
echo "   triggerDownload(csv, `${category}.csv`, \"text/csv\");\n";
echo " }\n";
echo "  /* ======================== 导出全部记录为ZIP ======================= */\n";
echo " async function exportAllZip() {\n";
echo "   if(globalData.length === 0) {\n";
echo "     alert(\"无可导出的数据，请先解析导入。\");\n";
echo "     return;\n";
echo "   }\n";
echo "    const zip = new JSZip();\n";
echo "   const categories = [...new Set(globalData.map(x => x[\"类别\"]))];\n";
echo "    categories.forEach(cat => {\n";
echo "     const catData = globalData.filter(x => x[\"类别\"] === cat);\n";
echo "     if(catData.length === 0) return;\n";
echo "      // 创建文件夹\n";
echo "     const folder = zip.folder(cat);\n";
echo "      // 带中文标注 TXT\n";
echo "     let txtWith = \"\";\n";
echo "     const headers = Object.keys(catData[0]).join(\" | \");\n";
echo "     txtWith += headers + \"\\n\";\n";
echo "     catData.forEach(item => {\n";
echo "       txtWith += Object.values(item).join(\" | \") + \"\\n\";\n";
echo "     });\n";
echo "     folder.file(`${cat}_带中文标注.txt`, txtWith);\n";
echo "      // 不带中文标注 TXT\n";
echo "     let txtWithout = \"\";\n";
echo "     catData.forEach(item => {\n";
echo "       if(item[\"access_token\"]) {\n";
echo "         txtWithout += item[\"access_token\"] + \"\\n\";\n";
echo "       }\n";
echo "     });\n";
echo "     folder.file(`${cat}_不带中文标注.txt`, txtWithout);\n";
echo "      // 导出HTML\n";
echo "     let html = `<h2>${cat}</h2>\n";
echo "     <table border=\"1\" cellpadding=\"5\" cellspacing=\"0\" style=\"border-collapse:collapse; width:100%;\">\n";
echo "       <tr>`;\n";
echo "     Object.keys(catData[0]).forEach(k => {\n";
echo "       html += `<th>${k}</th>`;\n";
echo "     });\n";
echo "     html += `</tr>`;\n";
echo "     catData.forEach(item => {\n";
echo "       html += `<tr>`;\n";
echo "       Object.keys(item).forEach(k => {\n";
echo "         html += `<td>${item[k]}</td>`;\n";
echo "       });\n";
echo "       html += `</tr>`;\n";
echo "     });\n";
echo "     html += `</table>`;\n";
echo "     folder.file(`${cat}.html`, html);\n";
echo "      // 导出CSV\n";
echo "     let csv = \"\";\n";
echo "     const headersCSV = Object.keys(catData[0]).join(\",\");\n";
echo "     csv += headersCSV + \"\\n\";\n";
echo "     catData.forEach(item => {\n";
echo "       const row = Object.keys(item).map(k => `\"${item[k]}\"`).join(\",\");\n";
echo "       csv += row + \"\\n\";\n";
echo "     });\n";
echo "     folder.file(`${cat}.csv`, csv);\n";
echo "   });\n";
echo "   const content = await zip.generateAsync({type:\"blob\"});\n";
echo "   triggerDownload(content, `全部分类导出_${Date.now()}.zip`, \"application/zip\");\n";
echo " }\n";
echo "  /* ======================== 触发下载功能 ======================= */\n";
echo " function triggerDownload(content, filename, mimeType) {\n";
echo "   const blob = (content instanceof Blob) ? content : new Blob([content], {type: `${mimeType};charset=utf-8`});\n";
echo "   const link = document.createElement(\"a\");\n";
echo "   link.href = URL.createObjectURL(blob);\n";
echo "   link.download = filename;\n";
echo "   document.body.appendChild(link);\n";
echo "   link.click();\n";
echo "   document.body.removeChild(link);\n";
echo " }\n";
echo "  /* ======================== 搜索功能 ======================= */\n";
echo " searchInputEl.addEventListener(\"input\", () => {\n";
echo "   const keyword = searchInputEl.value.trim();\n";
echo "   if(keyword === \"\") {\n";
echo "     // 显示全部分类\n";
echo "     renderCategories(categoriesData);\n";
echo "     renderCategoryChart(categoriesData);\n";
echo "     renderAdditionalCharts(categoriesData);\n";
echo "     return;\n";
echo "   }\n";
echo "   // 过滤角色名称包含关键词的记录\n";
echo "   const filtered = filteredData.filter(item => item[\"角色名称\"].includes(keyword));\n";
echo "   const newCategories = doClassification(filtered);\n";
echo "   renderCategories(newCategories);\n";
echo "   renderCategoryChart(newCategories);\n";
echo "   renderAdditionalCharts(newCategories);\n";
echo " });\n";
echo "  /* ======================== 数据可视化图表 ======================= */\n";
echo " function renderCategoryChart(data) {\n";
echo "   const ctx = document.getElementById('categoryChart').getContext('2d');\n";
echo "   const categories = [...new Set(data.map(x => x[\"类别\"]))];\n";
echo "   const counts = categories.map(cat => data.filter(x => x[\"类别\"] === cat).length);\n";
echo "    new Chart(ctx, {\n";
echo "     type: 'pie',\n";
echo "     data: {\n";
echo "       labels: categories,\n";
echo "       datasets: [{\n";
echo "         label: '分类分布',\n";
echo "         data: counts,\n";
echo "         backgroundColor: generateColors(categories.length),\n";
echo "       }]\n";
echo "     },\n";
echo "     options: {\n";
echo "       responsive: true,\n";
echo "       plugins: {\n";
echo "         legend: {\n";
echo "           position: 'right',\n";
echo "         },\n";
echo "         title: {\n";
echo "           display: true,\n";
echo "           text: '分类数据分布图'\n";
echo "         }\n";
echo "       }\n";
echo "     },\n";
echo "   });\n";
echo " }\n";
echo "  function renderAdditionalCharts(data) {\n";
echo "   // 游戏等级柱状图\n";
echo "   const levelBarCtx = document.getElementById('levelBarChart').getContext('2d');\n";
echo "   const levelCounts = {};\n";
echo "   data.forEach(item => {\n";
echo "     const level = item[\"游戏等级\"];\n";
echo "     levelCounts[level] = (levelCounts[level] || 0) + 1;\n";
echo "   });\n";
echo "   const sortedLevels = Object.keys(levelCounts).map(Number).sort((a, b) => a - b);\n";
echo "   const levelData = sortedLevels.map(lv => levelCounts[lv]);\n";
echo "    new Chart(levelBarCtx, {\n";
echo "     type: 'bar',\n";
echo "     data: {\n";
echo "       labels: sortedLevels,\n";
echo "       datasets: [{\n";
echo "         label: '游戏等级分布',\n";
echo "         data: levelData,\n";
echo "         backgroundColor: 'rgba(75, 192, 192, 0.6)',\n";
echo "       }]\n";
echo "     },\n";
echo "     options: {\n";
echo "       responsive: true,\n";
echo "       plugins: {\n";
echo "         legend: {\n";
echo "           display: false,\n";
echo "         },\n";
echo "         title: {\n";
echo "           display: true,\n";
echo "           text: '游戏等级分布柱状图'\n";
echo "         }\n";
echo "       },\n";
echo "       scales: {\n";
echo "         x: {\n";
echo "           title: {\n";
echo "             display: true,\n";
echo "             text: '游戏等级'\n";
echo "           }\n";
echo "         },\n";
echo "         y: {\n";
echo "           beginAtZero: true,\n";
echo "           title: {\n";
echo "             display: true,\n";
echo "             text: '数量'\n";
echo "           }\n";
echo "         }\n";
echo "       }\n";
echo "     },\n";
echo "   });\n";
echo "    // 仓库价值折线图\n";
echo "   const warehouseLineCtx = document.getElementById('warehouseLineChart').getContext('2d');\n";
echo "   const warehouseRanges = [\"0-2M\", \"2-5M\", \"5M以上\"];\n";
echo "   const warehouseCounts = {\n";
echo "     \"0-2M\": 0,\n";
echo "     \"2-5M\": 0,\n";
echo "     \"5M以上\": 0\n";
echo "   };\n";
echo "   data.forEach(item => {\n";
echo "     const warehouse = item[\"仓库价值\"];\n";
echo "     if(warehouse < 2) {\n";
echo "       warehouseCounts[\"0-2M\"] +=1;\n";
echo "     }\n";
echo "     else if(warehouse >=2 && warehouse <5) {\n";
echo "       warehouseCounts[\"2-5M\"] +=1;\n";
echo "     }\n";
echo "     else {\n";
echo "       warehouseCounts[\"5M以上\"] +=1;\n";
echo "     }\n";
echo "   });\n";
echo "   const warehouseData = warehouseRanges.map(range => warehouseCounts[range]);\n";
echo "    new Chart(warehouseLineCtx, {\n";
echo "     type: 'line',\n";
echo "     data: {\n";
echo "       labels: warehouseRanges,\n";
echo "       datasets: [{\n";
echo "         label: '仓库价值分布',\n";
echo "         data: warehouseData,\n";
echo "         fill: false,\n";
echo "         borderColor: 'rgba(153, 102, 255, 0.6)',\n";
echo "         tension: 0.1\n";
echo "       }]\n";
echo "     },\n";
echo "     options: {\n";
echo "       responsive: true,\n";
echo "       plugins: {\n";
echo "         legend: {\n";
echo "           display: false,\n";
echo "         },\n";
echo "         title: {\n";
echo "           display: true,\n";
echo "           text: '仓库价值分布折线图'\n";
echo "         }\n";
echo "       },\n";
echo "       scales: {\n";
echo "         x: {\n";
echo "           title: {\n";
echo "             display: true,\n";
echo "             text: '仓库价值范围'\n";
echo "           }\n";
echo "         },\n";
echo "         y: {\n";
echo "           beginAtZero: true,\n";
echo "           title: {\n";
echo "             display: true,\n";
echo "             text: '数量'\n";
echo "           }\n";
echo "         }\n";
echo "       }\n";
echo "     },\n";
echo "   });\n";
echo " }\n";
echo "  /* ======================== 导出功能 ======================= */\n";
echo " function downloadWithLabels(data, category) {\n";
echo "   if(!data || data.length === 0) return;\n";
echo "   let txt = \"\";\n";
echo "   const headers = Object.keys(data[0]).join(\" | \");\n";
echo "   txt += headers + \"\\n\";\n";
echo "   data.forEach(item => {\n";
echo "     txt += Object.values(item).join(\" | \") + \"\\n\";\n";
echo "   });\n";
echo "   triggerDownload(txt, `${category}_中文标注.txt`, \"text/plain\");\n";
echo " }\n";
echo "  function downloadWithoutLabels(data, category) {\n";
echo "   if(!data || data.length === 0) return;\n";
echo "   let txt = \"\";\n";
echo "   data.forEach(item => {\n";
echo "     if(item[\"access_token\"]) {\n";
echo "       txt += item[\"access_token\"] + \"\\n\";\n";
echo "     }\n";
echo "   });\n";
echo "   triggerDownload(txt, `${category}_无中文标注.txt`, \"text/plain\");\n";
echo " }\n";
echo "  function downloadHTML(data, category) {\n";
echo "   if(!data || data.length === 0) return;\n";
echo "   let html = `<h2>${category}</h2>\n";
echo "   <table border=\"1\" cellpadding=\"5\" cellspacing=\"0\" style=\"border-collapse:collapse; width:100%;\">\n";
echo "     <tr>`;\n";
echo "   Object.keys(data[0]).forEach(k => {\n";
echo "     html += `<th>${k}</th>`;\n";
echo "   });\n";
echo "   html += `</tr>`;\n";
echo "   data.forEach(item => {\n";
echo "     html += `<tr>`;\n";
echo "     Object.keys(item).forEach(k => {\n";
echo "       html += `<td>${item[k]}</td>`;\n";
echo "     });\n";
echo "     html += `</tr>`;\n";
echo "   });\n";
echo "   html += `</table>`;\n";
echo "   triggerDownload(html, `${category}.html`, \"text/html\");\n";
echo " }\n";
echo "  function downloadCSV(data, category) {\n";
echo "   if(!data || data.length === 0) return;\n";
echo "   let csv = \"\";\n";
echo "   const headers = Object.keys(data[0]).join(\",\");\n";
echo "   csv += headers + \"\\n\";\n";
echo "   data.forEach(item => {\n";
echo "     const row = Object.keys(item).map(k => `\"${item[k]}\"`).join(\",\");\n";
echo "     csv += row + \"\\n\";\n";
echo "   });\n";
echo "   triggerDownload(csv, `${category}.csv`, \"text/csv\");\n";
echo " }\n";
echo "  /* ======================== 导出全部记录为ZIP ======================= */\n";
echo " async function exportAllZip() {\n";
echo "   if(globalData.length === 0) {\n";
echo "     alert(\"无可导出的数据，请先解析导入。\");\n";
echo "     return;\n";
echo "   }\n";
echo "    const zip = new JSZip();\n";
echo "   const categories = [...new Set(globalData.map(x => x[\"类别\"]))];\n";
echo "    categories.forEach(cat => {\n";
echo "     const catData = globalData.filter(x => x[\"类别\"] === cat);\n";
echo "     if(catData.length === 0) return;\n";
echo "      // 创建文件夹\n";
echo "     const folder = zip.folder(cat);\n";
echo "      // 带中文标注 TXT\n";
echo "     let txtWith = \"\";\n";
echo "     const headers = Object.keys(catData[0]).join(\" | \");\n";
echo "     txtWith += headers + \"\\n\";\n";
echo "     catData.forEach(item => {\n";
echo "       txtWith += Object.values(item).join(\" | \") + \"\\n\";\n";
echo "     });\n";
echo "     folder.file(`${cat}_带中文标注.txt`, txtWith);\n";
echo "      // 不带中文标注 TXT\n";
echo "     let txtWithout = \"\";\n";
echo "     catData.forEach(item => {\n";
echo "       if(item[\"access_token\"]) {\n";
echo "         txtWithout += item[\"access_token\"] + \"\\n\";\n";
echo "       }\n";
echo "     });\n";
echo "     folder.file(`${cat}_不带中文标注.txt`, txtWithout);\n";
echo "      // 导出HTML\n";
echo "     let html = `<h2>${cat}</h2>\n";
echo "     <table border=\"1\" cellpadding=\"5\" cellspacing=\"0\" style=\"border-collapse:collapse; width:100%;\">\n";
echo "       <tr>`;\n";
echo "     Object.keys(catData[0]).forEach(k => {\n";
echo "       html += `<th>${k}</th>`;\n";
echo "     });\n";
echo "     html += `</tr>`;\n";
echo "     catData.forEach(item => {\n";
echo "       html += `<tr>`;\n";
echo "       Object.keys(item).forEach(k => {\n";
echo "         html += `<td>${item[k]}</td>`;\n";
echo "       });\n";
echo "       html += `</tr>`;\n";
echo "     });\n";
echo "     html += `</table>`;\n";
echo "     folder.file(`${cat}.html`, html);\n";
echo "      // 导出CSV\n";
echo "     let csv = \"\";\n";
echo "     const headersCSV = Object.keys(catData[0]).join(\",\");\n";
echo "     csv += headersCSV + \"\\n\";\n";
echo "     catData.forEach(item => {\n";
echo "       const row = Object.keys(item).map(k => `\"${item[k]}\"`).join(\",\");\n";
echo "       csv += row + \"\\n\";\n";
echo "     });\n";
echo "     folder.file(`${cat}.csv`, csv);\n";
echo "   });\n";
echo "   const content = await zip.generateAsync({type:\"blob\"});\n";
echo "   triggerDownload(content, `全部分类导出_${Date.now()}.zip`, \"application/zip\");\n";
echo " }\n";
echo "  /* ======================== 触发下载功能 ======================= */\n";
echo " function triggerDownload(content, filename, mimeType) {\n";
echo "   const blob = (content instanceof Blob) ? content : new Blob([content], {type: `${mimeType};charset=utf-8`});\n";
echo "   const link = document.createElement(\"a\");\n";
echo "   link.href = URL.createObjectURL(blob);\n";
echo "   link.download = filename;\n";
echo "   document.body.appendChild(link);\n";
echo "   link.click();\n";
echo "   document.body.removeChild(link);\n";
echo " }\n";
echo "  /* ======================== 搜索功能 ======================= */\n";
echo " searchInputEl.addEventListener(\"input\", () => {\n";
echo "   const keyword = searchInputEl.value.trim();\n";
echo "   if(keyword === \"\") {\n";
echo "     // 显示全部分类\n";
echo "     renderCategories(categoriesData);\n";
echo "     renderCategoryChart(categoriesData);\n";
echo "     renderAdditionalCharts(categoriesData);\n";
echo "     return;\n";
echo "   }\n";
echo "   // 过滤角色名称包含关键词的记录\n";
echo "   const filtered = filteredData.filter(item => item[\"角色名称\"].includes(keyword));\n";
echo "   const newCategories = doClassification(filtered);\n";
echo "   renderCategories(newCategories);\n";
echo "   renderCategoryChart(newCategories);\n";
echo "   renderAdditionalCharts(newCategories);\n";
echo " });\n";
echo "  /* ======================== 数据可视化图表 ======================= */\n";
echo " function renderCategoryChart(data) {\n";
echo "   const ctx = document.getElementById('categoryChart').getContext('2d');\n";
echo "   const categories = [...new Set(data.map(x => x[\"类别\"]))];\n";
echo "   const counts = categories.map(cat => data.filter(x => x[\"类别\"] === cat).length);\n";
echo "    new Chart(ctx, {\n";
echo "     type: 'pie',\n";
echo "     data: {\n";
echo "       labels: categories,\n";
echo "       datasets: [{\n";
echo "         label: '分类分布',\n";
echo "         data: counts,\n";
echo "         backgroundColor: generateColors(categories.length),\n";
echo "       }]\n";
echo "     },\n";
echo "     options: {\n";
echo "       responsive: true,\n";
echo "       plugins: {\n";
echo "         legend: {\n";
echo "           position: 'right',\n";
echo "         },\n";
echo "         title: {\n";
echo "           display: true,\n";
echo "           text: '分类数据分布图'\n";
echo "         }\n";
echo "       }\n";
echo "     },\n";
echo "   });\n";
echo " }\n";
echo "  function renderAdditionalCharts(data) {\n";
echo "   // 游戏等级柱状图\n";
echo "   const levelBarCtx = document.getElementById('levelBarChart').getContext('2d');\n";
echo "   const levelCounts = {};\n";
echo "   data.forEach(item => {\n";
echo "     const level = item[\"游戏等级\"];\n";
echo "     levelCounts[level] = (levelCounts[level] || 0) + 1;\n";
echo "   });\n";
echo "   const sortedLevels = Object.keys(levelCounts).map(Number).sort((a, b) => a - b);\n";
echo "   const levelData = sortedLevels.map(lv => levelCounts[lv]);\n";
echo "    new Chart(levelBarCtx, {\n";
echo "     type: 'bar',\n";
echo "     data: {\n";
echo "       labels: sortedLevels,\n";
echo "       datasets: [{\n";
echo "         label: '游戏等级分布',\n";
echo "         data: levelData,\n";
echo "         backgroundColor: 'rgba(75, 192, 192, 0.6)',\n";
echo "       }]\n";
echo "     },\n";
echo "     options: {\n";
echo "       responsive: true,\n";
echo "       plugins: {\n";
echo "         legend: {\n";
echo "           display: false,\n";
echo "         },\n";
echo "         title: {\n";
echo "           display: true,\n";
echo "           text: '游戏等级分布柱状图'\n";
echo "         }\n";
echo "       },\n";
echo "       scales: {\n";
echo "         x: {\n";
echo "           title: {\n";
echo "             display: true,\n";
echo "             text: '游戏等级'\n";
echo "           }\n";
echo "         },\n";
echo "         y: {\n";
echo "           beginAtZero: true,\n";
echo "           title: {\n";
echo "             display: true,\n";
echo "             text: '数量'\n";
echo "           }\n";
echo "         }\n";
echo "       }\n";
echo "     },\n";
echo "   });\n";
echo "    // 仓库价值折线图\n";
echo "   const warehouseLineCtx = document.getElementById('warehouseLineChart').getContext('2d');\n";
echo "   const warehouseRanges = [\"0-2M\", \"2-5M\", \"5M以上\"];\n";
echo "   const warehouseCounts = {\n";
echo "     \"0-2M\": 0,\n";
echo "     \"2-5M\": 0,\n";
echo "     \"5M以上\": 0\n";
echo "   };\n";
echo "   data.forEach(item => {\n";
echo "     const warehouse = item[\"仓库价值\"];\n";
echo "     if(warehouse < 2) {\n";
echo "       warehouseCounts[\"0-2M\"] +=1;\n";
echo "     }\n";
echo "     else if(warehouse >=2 && warehouse <5) {\n";
echo "       warehouseCounts[\"2-5M\"] +=1;\n";
echo "     }\n";
echo "     else {\n";
echo "       warehouseCounts[\"5M以上\"] +=1;\n";
echo "     }\n";
echo "   });\n";
echo "   const warehouseData = warehouseRanges.map(range => warehouseCounts[range]);\n";
echo "    new Chart(warehouseLineCtx, {\n";
echo "     type: 'line',\n";
echo "     data: {\n";
echo "       labels: warehouseRanges,\n";
echo "       datasets: [{\n";
echo "         label: '仓库价值分布',\n";
echo "         data: warehouseData,\n";
echo "         fill: false,\n";
echo "         borderColor: 'rgba(153, 102, 255, 0.6)',\n";
echo "         tension: 0.1\n";
echo "       }]\n";
echo "     },\n";
echo "     options: {\n";
echo "       responsive: true,\n";
echo "       plugins: {\n";
echo "         legend: {\n";
echo "           display: false,\n";
echo "         },\n";
echo "         title: {\n";
echo "           display: true,\n";
echo "           text: '仓库价值分布折线图'\n";
echo "         }\n";
echo "       },\n";
echo "       scales: {\n";
echo "         x: {\n";
echo "           title: {\n";
echo "             display: true,\n";
echo "             text: '仓库价值范围'\n";
echo "           }\n";
echo "         },\n";
echo "         y: {\n";
echo "           beginAtZero: true,\n";
echo "           title: {\n";
echo "             display: true,\n";
echo "             text: '数量'\n";
echo "           }\n";
echo "         }\n";
echo "       }\n";
echo "     },\n";
echo "   });\n";
echo " }\n";
echo "  /* ======================== 导出功能 ======================= */\n";
echo " function downloadWithLabels(data, category) {\n";
echo "   if(!data || data.length === 0) return;\n";
echo "   let txt = \"\";\n";
echo "   const headers = Object.keys(data[0]).join(\" | \");\n";
echo "   txt += headers + \"\\n\";\n";
echo "   data.forEach(item => {\n";
echo "     txt += Object.values(item).join(\" | \") + \"\\n\";\n";
echo "   });\n";
echo "   triggerDownload(txt, `${category}_中文标注.txt`, \"text/plain\");\n";
echo " }\n";
echo "  function downloadWithoutLabels(data, category) {\n";
echo "   if(!data || data.length === 0) return;\n";
echo "   let txt = \"\";\n";
echo "   data.forEach(item => {\n";
echo "     if(item[\"access_token\"]) {\n";
echo "       txt += item[\"access_token\"] + \"\\n\";\n";
echo "     }\n";
echo "   });\n";
echo "   triggerDownload(txt, `${category}_无中文标注.txt`, \"text/plain\");\n";
echo " }\n";
echo "  function downloadHTML(data, category) {\n";
echo "   if(!data || data.length === 0) return;\n";
echo "   let html = `<h2>${category}</h2>\n";
echo "   <table border=\"1\" cellpadding=\"5\" cellspacing=\"0\" style=\"border-collapse:collapse; width:100%;\">\n";
echo "     <tr>`;\n";
echo "   Object.keys(data[0]).forEach(k => {\n";
echo "     html += `<th>${k}</th>`;\n";
echo "   });\n";
echo "   html += `</tr>`;\n";
echo "   data.forEach(item => {\n";
echo "     html += `<tr>`;\n";
echo "     Object.keys(item).forEach(k => {\n";
echo "       html += `<td>${item[k]}</td>`;\n";
echo "     });\n";
echo "     html += `</tr>`;\n";
echo "   });\n";
echo "   html += `</table>`;\n";
echo "   triggerDownload(html, `${category}.html`, \"text/html\");\n";
echo " }\n";
echo "  function downloadCSV(data, category) {\n";
echo "   if(!data || data.length === 0) return;\n";
echo "   let csv = \"\";\n";
echo "   const headers = Object.keys(data[0]).join(\",\");\n";
echo "   csv += headers + \"\\n\";\n";
echo "   data.forEach(item => {\n";
echo "     const row = Object.keys(item).map(k => `\"${item[k]}\"`).join(\",\");\n";
echo "     csv += row + \"\\n\";\n";
echo "   });\n";
echo "   triggerDownload(csv, `${category}.csv`, \"text/csv\");\n";
echo " }\n";
echo "  /* ======================== 导出全部记录为ZIP ======================= */\n";
echo " async function exportAllZip() {\n";
echo "   if(globalData.length === 0) {\n";
echo "     alert(\"无可导出的数据，请先解析导入。\");\n";
echo "     return;\n";
echo "   }\n";
echo "    const zip = new JSZip();\n";
echo "   const categories = [...new Set(globalData.map(x => x[\"类别\"]))];\n";
echo "    categories.forEach(cat => {\n";
echo "     const catData = globalData.filter(x => x[\"类别\"] === cat);\n";
echo "     if(catData.length === 0) return;\n";
echo "      // 创建文件夹\n";
echo "     const folder = zip.folder(cat);\n";
echo "      // 带中文标注 TXT\n";
echo "     let txtWith = \"\";\n";
echo "     const headers = Object.keys(catData[0]).join(\" | \");\n";
echo "     txtWith += headers + \"\\n\";\n";
echo "     catData.forEach(item => {\n";
echo "       txtWith += Object.values(item).join(\" | \") + \"\\n\";\n";
echo "     });\n";
echo "     folder.file(`${cat}_带中文标注.txt`, txtWith);\n";
echo "      // 不带中文标注 TXT\n";
echo "     let txtWithout = \"\";\n";
echo "     catData.forEach(item => {\n";
echo "       if(item[\"access_token\"]) {\n";
echo "         txtWithout += item[\"access_token\"] + \"\\n\";\n";
echo "       }\n";
echo "     });\n";
echo "     folder.file(`${cat}_不带中文标注.txt`, txtWithout);\n";
echo "      // 导出HTML\n";
echo "     let html = `<h2>${cat}</h2>\n";
echo "     <table border=\"1\" cellpadding=\"5\" cellspacing=\"0\" style=\"border-collapse:collapse; width:100%;\">\n";
echo "       <tr>`;\n";
echo "     Object.keys(catData[0]).forEach(k => {\n";
echo "       html += `<th>${k}</th>`;\n";
echo "     });\n";
echo "     html += `</tr>`;\n";
echo "     catData.forEach(item => {\n";
echo "       html += `<tr>`;\n";
echo "       Object.keys(item).forEach(k => {\n";
echo "         html += `<td>${item[k]}</td>`;\n";
echo "       });\n";
echo "       html += `</tr>`;\n";
echo "     });\n";
echo "     html += `</table>`;\n";
echo "     folder.file(`${cat}.html`, html);\n";
echo "      // 导出CSV\n";
echo "     let csv = \"\";\n";
echo "     const headersCSV = Object.keys(catData[0]).join(\",\");\n";
echo "     csv += headersCSV + \"\\n\";\n";
echo "     catData.forEach(item => {\n";
echo "       const row = Object.keys(item).map(k => `\"${item[k]}\"`).join(\",\");\n";
echo "       csv += row + \"\\n\";\n";
echo "     });\n";
echo "     folder.file(`${cat}.csv`, csv);\n";
echo "   });\n";
echo "   const content = await zip.generateAsync({type:\"blob\"});\n";
echo "   triggerDownload(content, `全部分类导出_${Date.now()}.zip`, \"application/zip\");\n";
echo " }\n";
echo "  /* ======================== 触发下载功能 ======================= */\n";
echo " function triggerDownload(content, filename, mimeType) {\n";
echo "   const blob = (content instanceof Blob) ? content : new Blob([content], {type: `${mimeType};charset=utf-8`});\n";
echo "   const link = document.createElement(\"a\");\n";
echo "   link.href = URL.createObjectURL(blob);\n";
echo "   link.download = filename;\n";
echo "   document.body.appendChild(link);\n";
echo "   link.click();\n";
echo "   document.body.removeChild(link);\n";
echo " }\n";
echo "  /* ======================== 搜索功能 ======================= */\n";
echo " searchInputEl.addEventListener(\"input\", () => {\n";
echo "   const keyword = searchInputEl.value.trim();\n";
echo "   if(keyword === \"\") {\n";
echo "     // 显示全部分类\n";
echo "     renderCategories(categoriesData);\n";
echo "     renderCategoryChart(categoriesData);\n";
echo "     renderAdditionalCharts(categoriesData);\n";
echo "     return;\n";
echo "   }\n";
echo "   // 过滤角色名称包含关键词的记录\n";
echo "   const filtered = filteredData.filter(item => item[\"角色名称\"].includes(keyword));\n";
echo "   const newCategories = doClassification(filtered);\n";
echo "   renderCategories(newCategories);\n";
echo "   renderCategoryChart(newCategories);\n";
echo "   renderAdditionalCharts(newCategories);\n";
echo " });\n";
echo "  /* ======================== 数据可视化图表 ======================= */\n";
echo " function renderCategoryChart(data) {\n";
echo "   const ctx = document.getElementById('categoryChart').getContext('2d');\n";
echo "   const categories = [...new Set(data.map(x => x[\"类别\"]))];\n";
echo "   const counts = categories.map(cat => data.filter(x => x[\"类别\"] === cat).length);\n";
echo "    new Chart(ctx, {\n";
echo "     type: 'pie',\n";
echo "     data: {\n";
echo "       labels: categories,\n";
echo "       datasets: [{\n";
echo "         label: '分类分布',\n";
echo "         data: counts,\n";
echo "         backgroundColor: generateColors(categories.length),\n";
echo "       }]\n";
echo "     },\n";
echo "     options: {\n";
echo "       responsive: true,\n";
echo "       plugins: {\n";
echo "         legend: {\n";
echo "           position: 'right',\n";
echo "         },\n";
echo "         title: {\n";
echo "           display: true,\n";
echo "           text: '分类数据分布图'\n";
echo "         }\n";
echo "       }\n";
echo "     },\n";
echo "   });\n";
echo " }\n";
echo "  function renderAdditionalCharts(data) {\n";
echo "   // 游戏等级柱状图\n";
echo "   const levelBarCtx = document.getElementById('levelBarChart').getContext('2d');\n";
echo "   const levelCounts = {};\n";
echo "   data.forEach(item => {\n";
echo "     const level = item[\"游戏等级\"];\n";
echo "     levelCounts[level] = (levelCounts[level] || 0) + 1;\n";
echo "   });\n";
echo "   const sortedLevels = Object.keys(levelCounts).map(Number).sort((a, b) => a - b);\n";
echo "   const levelData = sortedLevels.map(lv => levelCounts[lv]);\n";
echo "    new Chart(levelBarCtx, {\n";
echo "     type: 'bar',\n";
echo "     data: {\n";
echo "       labels: sortedLevels,\n";
echo "       datasets: [{\n";
echo "         label: '游戏等级分布',\n";
echo "         data: levelData,\n";
echo "         backgroundColor: 'rgba(75, 192, 192, 0.6)',\n";
echo "       }]\n";
echo "     },\n";
echo "     options: {\n";
echo "       responsive: true,\n";
echo "       plugins: {\n";
echo "         legend: {\n";
echo "           display: false,\n";
echo "         },\n";
echo "         title: {\n";
echo "           display: true,\n";
echo "           text: '游戏等级分布柱状图'\n";
echo "         }\n";
echo "       },\n";
echo "       scales: {\n";
echo "         x: {\n";
echo "           title: {\n";
echo "             display: true,\n";
echo "             text: '游戏等级'\n";
echo "           }\n";
echo "         },\n";
echo "         y: {\n";
echo "           beginAtZero: true,\n";
echo "           title: {\n";
echo "             display: true,\n";
echo "             text: '数量'\n";
echo "           }\n";
echo "         }\n";
echo "       }\n";
echo "     },\n";
echo "   });\n";
echo "    // 仓库价值折线图\n";
echo "   const warehouseLineCtx = document.getElementById('warehouseLineChart').getContext('2d');\n";
echo "   const warehouseRanges = [\"0-2M\", \"2-5M\", \"5M以上\"];\n";
echo "   const warehouseCounts = {\n";
echo "     \"0-2M\": 0,\n";
echo "     \"2-5M\": 0,\n";
echo "     \"5M以上\": 0\n";
echo "   };\n";
echo "   data.forEach(item => {\n";
echo "     const warehouse = item[\"仓库价值\"];\n";
echo "     if(warehouse < 2) {\n";
echo "       warehouseCounts[\"0-2M\"] +=1;\n";
echo "     }\n";
echo "     else if(warehouse >=2 && warehouse <5) {\n";
echo "       warehouseCounts[\"2-5M\"] +=1;\n";
echo "     }\n";
echo "     else {\n";
echo "       warehouseCounts[\"5M以上\"] +=1;\n";
echo "     }\n";
echo "   });\n";
echo "   const warehouseData = warehouseRanges.map(range => warehouseCounts[range]);\n";
echo "    new Chart(warehouseLineCtx, {\n";
echo "     type: 'line',\n";
echo "     data: {\n";
echo "       labels: warehouseRanges,\n";
echo "       datasets: [{\n";
echo "         label: '仓库价值分布',\n";
echo "         data: warehouseData,\n";
echo "         fill: false,\n";
echo "         borderColor: 'rgba(153, 102, 255, 0.6)',\n";
echo "         tension: 0.1\n";
echo "       }]\n";
echo "     },\n";
echo "     options: {\n";
echo "       responsive: true,\n";
echo "       plugins: {\n";
echo "         legend: {\n";
echo "           display: false,\n";
echo "         },\n";
echo "         title: {\n";
echo "           display: true,\n";
echo "           text: '仓库价值分布折线图'\n";
echo "         }\n";
echo "       },\n";
echo "       scales: {\n";
echo "         x: {\n";
echo "           title: {\n";
echo "             display: true,\n";
echo "             text: '仓库价值范围'\n";
echo "           }\n";
echo "         },\n";
echo "         y: {\n";
echo "           beginAtZero: true,\n";
echo "           title: {\n";
echo "             display: true,\n";
echo "             text: '数量'\n";
echo "           }\n";
echo "         }\n";
echo "       }\n";
echo "     },\n";
echo "   });\n";
echo " }\n";
echo "  /* ======================== 导出功能 ======================= */\n";
echo " function downloadWithLabels(data, category) {\n";
echo "   if(!data || data.length === 0) return;\n";
echo "   let txt = \"\";\n";
echo "   const headers = Object.keys(data[0]).join(\" | \");\n";
echo "   txt += headers + \"\\n\";\n";
echo "   data.forEach(item => {\n";
echo "     txt += Object.values(item).join(\" | \") + \"\\n\";\n";
echo "   });\n";
echo "   triggerDownload(txt, `${category}_中文标注.txt`, \"text/plain\");\n";
echo " }\n";
echo "  function downloadWithoutLabels(data, category) {\n";
echo "   if(!data || data.length === 0) return;\n";
echo "   let txt = \"\";\n";
echo "   data.forEach(item => {\n";
echo "     if(item[\"access_token\"]) {\n";
echo "       txt += item[\"access_token\"] + \"\\n\";\n";
echo "     }\n";
echo "   });\n";
echo "   triggerDownload(txt, `${category}_无中文标注.txt`, \"text/plain\");\n";
echo " }\n";
echo "  function downloadHTML(data, category) {\n";
echo "   if(!data || data.length === 0) return;\n";
echo "   let html = `<h2>${category}</h2>\n";
echo "   <table border=\"1\" cellpadding=\"5\" cellspacing=\"0\" style=\"border-collapse:collapse; width:100%;\">\n";
echo "     <tr>`;\n";
echo "   Object.keys(data[0]).forEach(k => {\n";
echo "     html += `<th>${k}</th>`;\n";
echo "   });\n";
echo "   html += `</tr>`;\n";
echo "   data.forEach(item => {\n";
echo "     html += `<tr>`;\n";
echo "     Object.keys(item).forEach(k => {\n";
echo "       html += `<td>${item[k]}</td>`;\n";
echo "     });\n";
echo "     html += `</tr>`;\n";
echo "   });\n";
echo "   html += `</table>`;\n";
echo "   triggerDownload(html, `${category}.html`, \"text/html\");\n";
echo " }\n";
echo "  function downloadCSV(data, category) {\n";
echo "   if(!data || data.length === 0) return;\n";
echo "   let csv = \"\";\n";
echo "   const headers = Object.keys(data[0]).join(\",\");\n";
echo "   csv += headers + \"\\n\";\n";
echo "   data.forEach(item => {\n";
echo "     const row = Object.keys(item).map(k => `\"${item[k]}\"`).join(\",\");\n";
echo "     csv += row + \"\\n\";\n";
echo "   });\n";
echo "   triggerDownload(csv, `${category}.csv`, \"text/csv\");\n";
echo " }\n";
echo "  /* ======================== 导出全部记录为ZIP ======================= */\n";
echo " async function exportAllZip() {\n";
echo "   if(globalData.length === 0) {\n";
echo "     alert(\"无可导出的数据，请先解析导入。\");\n";
echo "     return;\n";
echo "   }\n";
echo "    const zip = new JSZip();\n";
echo "   const categories = [...new Set(globalData.map(x => x[\"类别\"]))];\n";
echo "    categories.forEach(cat => {\n";
echo "     const catData = globalData.filter(x => x[\"类别\"] === cat);\n";
echo "     if(catData.length === 0) return;\n";
echo "      // 创建文件夹\n";
echo "     const folder = zip.folder(cat);\n";
echo "      // 带中文标注 TXT\n";
echo "     let txtWith = \"\";\n";
echo "     const headers = Object.keys(catData[0]).join(\" | \");\n";
echo "     txtWith += headers + \"\\n\";\n";
echo "     catData.forEach(item => {\n";
echo "       txtWith += Object.values(item).join(\" | \") + \"\\n\";\n";
echo "     });\n";
echo "     folder.file(`${cat}_带中文标注.txt`, txtWith);\n";
echo "      // 不带中文标注 TXT\n";
echo "     let txtWithout = \"\";\n";
echo "     catData.forEach(item => {\n";
echo "       if(item[\"access_token\"]) {\n";
echo "         txtWithout += item[\"access_token\"] + \"\\n\";\n";
echo "       }\n";
echo "     });\n";
echo "     folder.file(`${cat}_不带中文标注.txt`, txtWithout);\n";
echo "      // 导出HTML\n";
echo "     let html = `<h2>${cat}</h2>\n";
echo "     <table border=\"1\" cellpadding=\"5\" cellspacing=\"0\" style=\"border-collapse:collapse; width:100%;\">\n";
echo "       <tr>`;\n";
echo "     Object.keys(catData[0]).forEach(k => {\n";
echo "       html += `<th>${k}</th>`;\n";
echo "     });\n";
echo "     html += `</tr>`;\n";
echo "     catData.forEach(item => {\n";
echo "       html += `<tr>`;\n";
echo "       Object.keys(item).forEach(k => {\n";
echo "         html += `<td>${item[k]}</td>`;\n";
echo "       });\n";
echo "       html += `</tr>`;\n";
echo "     });\n";
echo "     html += `</table>`;\n";
echo "     folder.file(`${cat}.html`, html);\n";
echo "      // 导出CSV\n";
echo "     let csv = \"\";\n";
echo "     const headersCSV = Object.keys(catData[0]).join(\",\");\n";
echo "     csv += headersCSV + \"\\n\";\n";
echo "     catData.forEach(item => {\n";
echo "       const row = Object.keys(item).map(k => `\"${item[k]}\"`).join(\",\");\n";
echo "       csv += row + \"\\n\";\n";
echo "     });\n";
echo "     folder.file(`${cat}.csv`, csv);\n";
echo "   });\n";
echo "   const content = await zip.generateAsync({type:\"blob\"});\n";
echo "   triggerDownload(content, `全部分类导出_${Date.now()}.zip`, \"application/zip\");\n";
echo " }\n";
echo "  /* ======================== 触发下载功能 ======================= */\n";
echo " function triggerDownload(content, filename, mimeType) {\n";
echo "   const blob = (content instanceof Blob) ? content : new Blob([content], {type: `${mimeType};charset=utf-8`});\n";
echo "   const link = document.createElement(\"a\");\n";
echo "   link.href = URL.createObjectURL(blob);\n";
echo "   link.download = filename;\n";
echo "   document.body.appendChild(link);\n";
echo "   link.click();\n";
echo "   document.body.removeChild(link);\n";
echo " }\n";
echo "  /* ======================== 搜索功能 ======================= */\n";
echo " searchInputEl.addEventListener(\"input\", () => {\n";
echo "   const keyword = searchInputEl.value.trim();\n";
echo "   if(keyword === \"\") {\n";
echo "     // 显示全部分类\n";
echo "     renderCategories(categoriesData);\n";
echo "     renderCategoryChart(categoriesData);\n";
echo "     renderAdditionalCharts(categoriesData);\n";
echo "     return;\n";
echo "   }\n";
echo "   // 过滤角色名称包含关键词的记录\n";
echo "   const filtered = filteredData.filter(item => item[\"角色名称\"].includes(keyword));\n";
echo "   const newCategories = doClassification(filtered);\n";
echo "   renderCategories(newCategories);\n";
echo "   renderCategoryChart(newCategories);\n";
echo "   renderAdditionalCharts(newCategories);\n";
echo " });\n";
echo "  /* ======================== 数据可视化图表 ======================= */\n";
echo " function renderCategoryChart(data) {\n";
echo "   const ctx = document.getElementById('categoryChart').getContext('2d');\n";
echo "   const categories = [...new Set(data.map(x => x[\"类别\"]))];\n";
echo "   const counts = categories.map(cat => data.filter(x => x[\"类别\"] === cat).length);\n";
echo "    new Chart(ctx, {\n";
echo "     type: 'pie',\n";
echo "     data: {\n";
echo "       labels: categories,\n";
echo "       datasets: [{\n";
echo "         label: '分类分布',\n";
echo "         data: counts,\n";
echo "         backgroundColor: generateColors(categories.length),\n";
echo "       }]\n";
echo "     },\n";
echo "     options: {\n";
echo "       responsive: true,\n";
echo "       plugins: {\n";
echo "         legend: {\n";
echo "           position: 'right',\n";
echo "         },\n";
echo "         title: {\n";
echo "           display: true,\n";
echo "           text: '分类数据分布图'\n";
echo "         }\n";
echo "       }\n";
echo "     },\n";
echo "   });\n";
echo " }\n";
echo "  function renderAdditionalCharts(data) {\n";
echo "   // 游戏等级柱状图\n";
echo "   const levelBarCtx = document.getElementById('levelBarChart').getContext('2d');\n";
echo "   const levelCounts = {};\n";
echo "   data.forEach(item => {\n";
echo "     const level = item[\"游戏等级\"];\n";
echo "     levelCounts[level] = (levelCounts[level] || 0) + 1;\n";
echo "   });\n";
echo "   const sortedLevels = Object.keys(levelCounts).map(Number).sort((a, b) => a - b);\n";
echo "   const levelData = sortedLevels.map(lv => levelCounts[lv]);\n";
echo "    new Chart(levelBarCtx, {\n";
echo "     type: 'bar',\n";
echo "     data: {\n";
echo "       labels: sortedLevels,\n";
echo "       datasets: [{\n";
echo "         label: '游戏等级分布',\n";
echo "         data: levelData,\n";
echo "         backgroundColor: 'rgba(75, 192, 192, 0.6)',\n";
echo "       }]\n";
echo "     },\n";
echo "     options: {\n";
echo "       responsive: true,\n";
echo "       plugins: {\n";
echo "         legend: {\n";
echo "           display: false,\n";
echo "         },\n";
echo "         title: {\n";
echo "           display: true,\n";
echo "           text: '游戏等级分布柱状图'\n";
echo "         }\n";
echo "       },\n";
echo "       scales: {\n";
echo "         x: {\n";
echo "           title: {\n";
echo "             display: true,\n";
echo "             text: '游戏等级'\n";
echo "           }\n";
echo "         },\n";
echo "         y: {\n";
echo "           beginAtZero: true,\n";
echo "           title: {\n";
echo "             display: true,\n";
echo "             text: '数量'\n";
echo "           }\n";
echo "         }\n";
echo "       }\n";
echo "     },\n";
echo "   });\n";
echo "    // 仓库价值折线图\n";
echo "   const warehouseLineCtx = document.getElementById('warehouseLineChart').getContext('2d');\n";
echo "   const warehouseRanges = [\"0-2M\", \"2-5M\", \"5M以上\"];\n";
echo "   const warehouseCounts = {\n";
echo "     \"0-2M\": 0,\n";
echo "     \"2-5M\": 0,\n";
echo "     \"5M以上\": 0\n";
echo "   };\n";
echo "   data.forEach(item => {\n";
echo "     const warehouse = item[\"仓库价值\"];\n";
echo "     if(warehouse < 2) {\n";
echo "       warehouseCounts[\"0-2M\"] +=1;\n";
echo "     }\n";
echo "     else if(warehouse >=2 && warehouse <5) {\n";
echo "       warehouseCounts[\"2-5M\"] +=1;\n";
echo "     }\n";
echo "     else {\n";
echo "       warehouseCounts[\"5M以上\"] +=1;\n";
echo "     }\n";
echo "   });\n";
echo "   const warehouseData = warehouseRanges.map(range => warehouseCounts[range]);\n";
echo "    new Chart(warehouseLineCtx, {\n";
echo "     type: 'line',\n";
echo "     data: {\n";
echo "       labels: warehouseRanges,\n";
echo "       datasets: [{\n";
echo "         label: '仓库价值分布',\n";
echo "         data: warehouseData,\n";
echo "         fill: false,\n";
echo "         borderColor: 'rgba(153, 102, 255, 0.6)',\n";
echo "         tension: 0.1\n";
echo "       }]\n";
echo "     },\n";
echo "     options: {\n";
echo "       responsive: true,\n";
echo "       plugins: {\n";
echo "         legend: {\n";
echo "           display: false,\n";
echo "         },\n";
echo "         title: {\n";
echo "           display: true,\n";
echo "           text: '仓库价值分布折线图'\n";
echo "         }\n";
echo "       },\n";
echo "       scales: {\n";
echo "         x: {\n";
echo "           title: {\n";
echo "             display: true,\n";
echo "             text: '仓库价值范围'\n";
echo "           }\n";
echo "         },\n";
echo "         y: {\n";
echo "           beginAtZero: true,\n";
echo "           title: {\n";
echo "             display: true,\n";
echo "             text: '数量'\n";
echo "           }\n";
echo "         }\n";
echo "       }\n";
echo "     },\n";
echo "   });\n";
echo " }\n";
echo "  /* ======================== 分类逻辑调整 ======================= */\n";
echo " function doClassification(data) {\n";
echo "   data.forEach(item => {\n";
echo "     let lvCat = \"\";\n";
echo "     let wvCat = \"\";\n";
echo "     const level = item[\"游戏等级\"];\n";
echo "     const warehouse = item[\"仓库价值\"];\n";
echo "      // 分类逻辑调整：\n";
echo "     // 舍弃 30级以上且仓库价值 <5M\n";
echo "     if(level >= 30 && warehouse < 5) {\n";
echo "       // 不纳入任何类别\n";
echo "       return;\n";
echo "     }\n";
echo "      // 新增分类：\n";
echo "     if(level >= 30) {\n";
echo "       if(warehouse < 2) {\n";
echo "         lvCat = \"30级以上2M以下\";\n";
echo "       }\n";
echo "       else if(warehouse >=2 && warehouse <5) {\n";
echo "         lvCat = \"30级以上2M-5M\";\n";
echo "       }\n";
echo "       else {\n";
echo "         lvCat = \"30级以上5M以上\";\n";
echo "       }\n";
echo "     }\n";
echo "     else if(level > 12 && level < 30) {\n";
echo "       lvCat = \"30级以下12级以上\";\n";
echo "     }\n";
echo "     else {\n";
echo "       lvCat = \"12级以下\";\n";
echo "     }\n";
echo "      // 仓库价值分类保持不变\n";
echo "     if(level < 30) { // 只针对不属于30级以上的分类\n";
echo "       if(warehouse < 5) wvCat = \"仓库价值0-5M\";\n";
echo "       else if(warehouse < 10) wvCat = \"仓库价值5-10M\";\n";
echo "       else if(warehouse < 15) wvCat = \"仓库价值10-15M\";\n";
echo "       else if(warehouse < 20) wvCat = \"仓库价值15-20M\";\n";
echo "       else if(warehouse < 25) wvCat = \"仓库价值20-25M\";\n";
echo "       else if(warehouse < 30) wvCat = \"仓库价值25-30M\";\n";
echo "       else wvCat = \"仓库价值30M以上\";\n";
echo "     } else { // 30级以上的分类，已经包含了仓库价值的细分\n";
echo "       if(warehouse < 2) {\n";
echo "         wvCat = \"仓库价值0-2M\";\n";
echo "       }\n";
echo "       else if(warehouse >=2 && warehouse <5) {\n";
echo "         wvCat = \"仓库价值2-5M\";\n";
echo "       }\n";
echo "       else {\n";
echo "         wvCat = \"仓库价值5M以上\";\n";
echo "       }\n";
echo "     }\n";
echo "      item[\"类别\"] = lvCat + \"_\" + wvCat;\n";
echo "   });\n";
echo "   // 过滤掉未分类的记录\n";
echo "   return data.filter(item => item[\"类别\"]);\n";
echo " }\n";
echo "  /* ======================== 渲染全部数据表 ======================= */\n";
echo " function renderAllDataTable(data) {\n";
echo "   if(!data || data.length === 0){\n";
echo "     allDataSectionEl.style.display = \"none\";\n";
echo "     return;\n";
echo "   }\n";
echo "   allDataSectionEl.style.display = \"block\";\n";
echo "   allDataTableEl.innerHTML = \"\";\n";
echo "    // 表头\n";
echo "   const header = document.createElement(\"tr\");\n";
echo "   const thCheck = document.createElement(\"th\");\n";
echo "   thCheck.innerHTML = `<input type=\"checkbox\" id=\"selectAll\">`;\n";
echo "   thCheck.style.width = \"60px\";\n";
echo "   header.appendChild(thCheck);\n";
echo "   Object.keys(data[0]).forEach(k => {\n";
echo "     const th = document.createElement(\"th\");\n";
echo "     th.textContent = k;\n";
echo "     header.appendChild(th);\n";
echo "   });\n";
echo "   allDataTableEl.appendChild(header);\n";
echo "    // 表格内容\n";
echo "   data.forEach((item, idx) => {\n";
echo "     const tr = document.createElement(\"tr\");\n";
echo "     const tdCheck = document.createElement(\"td\");\n";
echo "     const cb = document.createElement(\"input\");\n";
echo "     cb.type = \"checkbox\";\n";
echo "     cb.value = idx;\n";
echo "     tdCheck.appendChild(cb);\n";
echo "     tr.appendChild(tdCheck);\n";
echo "      Object.keys(item).forEach(key => {\n";
echo "       const td = document.createElement(\"td\");\n";
echo "       td.textContent = item[key];\n";
echo "       tr.appendChild(td);\n";
echo "     });\n";
echo "     allDataTableEl.appendChild(tr);\n";
echo "   });\n";
echo "    // 全选功能\n";
echo "   const selectAllCb = document.getElementById(\"selectAll\");\n";
echo "   selectAllCb.addEventListener(\"change\", (e) => {\n";
echo "     const checkboxes = allDataTableEl.querySelectorAll('input[type=\"checkbox\"]');\n";
echo "     checkboxes.forEach(cb => cb.checked = e.target.checked);\n";
echo "   });\n";
echo " }\n";
echo "  /* ======================== 渲染分类结果 ======================= */\n";
echo " function renderCategories(data) {\n";
echo "   resultsDiv.innerHTML = \"\";\n";
echo "   if(!data || data.length === 0){\n";
echo "     resultsDiv.innerHTML = \"<p>没有可显示的数据</p>\";\n";
echo "     return;\n";
echo "   }\n";
echo "   const categories = [...new Set(data.map(x => x[\"类别\"]))];\n";
echo "    categories.forEach(cat => {\n";
echo "     const catBlock = document.createElement(\"div\");\n";
echo "     catBlock.className = \"p-4 mb-4 bg-white border rounded shadow-sm fade-in\";\n";
echo "      // 折叠按钮\n";
echo "     const header = document.createElement(\"div\");\n";
echo "     header.className = \"d-flex justify-content-between align-items-center category-header\";\n";
echo "     header.setAttribute(\"data-bs-toggle\", \"collapse\");\n";
echo "     header.setAttribute(\"data-bs-target\", `#collapse-${sanitizeCategory(cat)}`);\n";
echo "     header.setAttribute(\"aria-expanded\", \"false\");\n";
echo "     header.setAttribute(\"aria-controls\", `collapse-${sanitizeCategory(cat)}`);\n";
echo "      const h5 = document.createElement(\"h5\");\n";
echo "     h5.textContent = cat;\n";
echo "     header.appendChild(h5);\n";
echo "      const toggleIcon = document.createElement(\"i\");\n";
echo "     toggleIcon.className = \"bi bi-chevron-down\";\n";
echo "     header.appendChild(toggleIcon);\n";
echo "      catBlock.appendChild(header);\n";
echo "      // 折叠内容\n";
echo "     const collapseDiv = document.createElement(\"div\");\n";
echo "     collapseDiv.className = \"collapse\";\n";
echo "     collapseDiv.id = `collapse-${sanitizeCategory(cat)}`;\n";
echo "      // 分类数据\n";
echo "     const catData = data.filter(x => x[\"类别\"] === cat);\n";
echo "      // 按钮容器\n";
echo "     const btnContainer = document.createElement(\"div\");\n";
echo "     btnContainer.className = \"mb-3\";\n";
echo "      // 带中文标注 TXT\n";
echo "     const btnWith = document.createElement(\"button\");\n";
echo "     btnWith.className = \"btn btn-sm btn-outline-primary me-2 btn-animate\";\n";
echo "     btnWith.innerHTML = `<i class=\"bi bi-clipboard-check\"></i> 带中文标注 TXT`;\n";
echo "     btnWith.onclick = () => downloadWithLabels(catData, cat);\n";
echo "     btnContainer.appendChild(btnWith);\n";
echo "      // 不带中文标注 TXT\n";
echo "     const btnWithout = document.createElement(\"button\");\n";
echo "     btnWithout.className = \"btn btn-sm btn-outline-secondary me-2 btn-animate\";\n";
echo "     btnWithout.innerHTML = `<i class=\"bi bi-clipboard-x\"></i> 不带中文标注 TXT`;\n";
echo "     btnWithout.onclick = () => downloadWithoutLabels(catData, cat);\n";
echo "     btnContainer.appendChild(btnWithout);\n";
echo "      // 导出 HTML\n";
echo "     const btnHTML = document.createElement(\"button\");\n";
echo "     btnHTML.className = \"btn btn-sm btn-outline-success me-2 btn-animate\";\n";
echo "     btnHTML.innerHTML = `<i class=\"bi bi-file-earmark-text\"></i> 导出 HTML`;\n";
echo "     btnHTML.onclick = () => downloadHTML(catData, cat);\n";
echo "     btnContainer.appendChild(btnHTML);\n";
echo "      // 导出 CSV\n";
echo "     const btnCSV = document.createElement(\"button\");\n";
echo "     btnCSV.className = \"btn btn-sm btn-outline-warning me-2 btn-animate\";\n";
echo "     btnCSV.innerHTML = `<i class=\"bi bi-file-earmark-spreadsheet\"></i> 导出 CSV`;\n";
echo "     btnCSV.onclick = () => downloadCSV(catData, cat);\n";
echo "     btnContainer.appendChild(btnCSV);\n";
echo "      collapseDiv.appendChild(btnContainer);\n";
echo "     catBlock.appendChild(collapseDiv);\n";
echo "      resultsDiv.appendChild(catBlock);\n";
echo "   });\n";
echo " }\n";
echo "  /* ======================== 分类名称消毒函数 ======================= */\n";
echo " function sanitizeCategory(cat) {\n";
echo "   return cat.replace(/[^a-zA-Z0-9]/g, '_');\n";
echo " }\n";
echo "  /* ======================== IP查询功能 ======================= */\n";
echo " function fetchIp() {\n";
echo "   if(!enableIpCheckEl.checked){\n";
echo "     ipTitle = \"未启用IP\";\n";
echo "     ipInfoEl.textContent = \"IP查询已关闭\";\n";
echo "     return;\n";
echo "   }\n";
echo "   fetch(\"https://ip-api.com/json/\")\n";
echo "   .then(response => response.json())\n";
echo "   .then(data => {\n";
echo "     if(data.status === \"success\") {\n";
echo "       ipTitle = `${data.query}(${data.regionName})`;\n";
echo "       ipInfoEl.textContent = `${data.query} - ${data.country} / ${data.regionName} / ${data.city}`;\n";
echo "     } else {\n";
echo "       ipTitle = \"IP查询失败\";\n";
echo "       ipInfoEl.textContent = \"无法获取IP（接口返回失败）\";\n";
echo "     }\n";
echo "   })\n";
echo "   .catch(err => {\n";
echo "     ipTitle = \"IP查询错误\";\n";
echo "     ipInfoEl.textContent = `无法获取IP（${err.message}）`;\n";
echo "   });\n";
echo " }\n";
echo "  /* ======================== 页面加载时获取IP ======================= */\n";
echo " window.addEventListener(\"DOMContentLoaded\", () => {\n";
echo "   fetchIp();\n";
echo " });\n";
echo "  /* ======================== 主题切换功能 ======================= */\n";
echo " function toggleTheme() {\n";
echo "   document.body.classList.toggle(\"dark-mode\");\n";
echo "   const icon = toggleThemeBtn.querySelector(\"i\");\n";
echo "   if(document.body.classList.contains(\"dark-mode\")) {\n";
echo "     icon.classList.remove(\"bi-moon\");\n";
echo "     icon.classList.add(\"bi-sun\");\n";
echo "     toggleThemeBtn.innerHTML = `<i class=\"bi bi-sun\"></i> 浅色模式`;\n";
echo "   } else {\n";
echo "     icon.classList.remove(\"bi-sun\");\n";
echo "     icon.classList.add(\"bi-moon\");\n";
echo "     toggleThemeBtn.innerHTML = `<i class=\"bi bi-moon\"></i> 深色模式`;\n";
echo "   }\n";
echo " }\n";
echo "</script>\n";
echo "</body>\n";
echo "/html>\n";
?>